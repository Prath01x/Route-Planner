package routing.tests.local.fast;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import routing.Coordinate;
import routing.Node;
import routing.NodeFinder;
import routing.tests.TestingBase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestCampusMapRandomNodeFindingTests extends TestingBase {

	@Before
	public void setUp() {
		getNodeFinder();
	}
	
	@Override
	public String getMapFileName() {
		return "campus.osm.nae";
	}

	@Test(timeout = 1000)
	public void testNodeFinding10RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.263743067319304, 49.24556783458059,
				49.24571322373514, 49.271524880769945, 49.25803178451556,
				49.24559857070092, 49.24003353857166, 49.235574374396705,
				49.26519394530307, 49.24567948642297 };
		double[] longitudes = { 7.062464206566657, 7.041301774395431,
				7.069940975621201, 7.037164031943074, 7.015803948896557,
				7.0068050702764815, 7.013146356526111, 7.062780725180444,
				7.005837105949534, 7.063189423362847 };
		long[] nodes = { 1139485991l, 1535754818l, 268784103l, 132500918l,
				3406862356l, 2146362274l, 332083272l, 275916810l, 3406862384l,
				268784103l };
		for (int i = 0; i < 10; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding11RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.258018455054554, 49.258190485701945,
				49.26805933028584, 49.25859871173982, 49.25233964483298,
				49.25071175477896, 49.27212111353176, 49.23975051290151,
				49.25484180242006, 49.23917693404703, 49.26191262219027 };
		double[] longitudes = { 7.035841041503145, 7.014408091970525,
				7.021509541027176, 7.0073315561744325, 6.9952134573983855,
				7.035806199233381, 7.003466210767383, 6.999007716027201,
				7.051620804271435, 7.06745347426522, 7.058421188226101 };
		long[] nodes = { 2627125375l, 3406862359l, 132500930l, 1305926264l,
				292496562l, 1026110152l, 3406878006l, 2146362252l, 1424436022l,
				268784100l, 374378056l };
		for (int i = 0; i < 11; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding12RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.23605372511369, 49.27167951378534,
				49.25014178296908, 49.24591086660141, 49.26999619331956,
				49.262552563549825, 49.24265170230338, 49.241143683589044,
				49.24665945366294, 49.239271084686735, 49.25670431643136,
				49.236768569678226 };
		double[] longitudes = { 7.003016525292783, 7.066634478876275,
				7.012534388910669, 7.026144467293782, 7.011829809881278,
				7.059583259044803, 7.056288973198023, 7.019126027669759,
				6.995846274224824, 7.070049909725186, 7.079348370014118,
				7.065287115189118 };
		long[] nodes = { 2146362252l, 2963138086l, 2257371813l, 295135966l,
				3406878006l, 374378056l, 1323383378l, 2259838874l, 292496531l,
				268784100l, 268779773l, 275916808l };
		for (int i = 0; i < 12; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding13RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.27066137637931, 49.25277082032403,
				49.24931925802553, 49.241307714525924, 49.25536468058086,
				49.261991365422915, 49.23709915464778, 49.24326563605737,
				49.24567818757558, 49.23976532191771, 49.24196790861525,
				49.265207591890736, 49.269163471729556 };
		double[] longitudes = { 7.018549379245917, 7.01860220865011,
				7.054126197608839, 7.002768476996497, 7.0486682428166185,
				7.065709064607949, 7.004462147191404, 7.0496853408749525,
				7.013291018244889, 7.033968812392906, 7.035602614733292,
				7.077095891479713, 7.019932900197497 };
		long[] nodes = { 132500930l, 3110133797l, 1030596191l, 2146362252l,
				374382471l, 324406348l, 2146362252l, 268783509l, 2146362252l,
				1267365033l, 268783362l, 268782315l, 132500930l };
		for (int i = 0; i < 13; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding14RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.24839601885556, 49.26001896965678,
				49.271781621002575, 49.26282195645647, 49.26179784708412,
				49.271234513207084, 49.250452194957454, 49.24109325229092,
				49.26422408340414, 49.25527805157437, 49.24104153461855,
				49.240625227321004, 49.27114084634301, 49.237187793306425 };
		double[] longitudes = { 7.071117941589648, 7.0795962995347415,
				7.067691539360341, 7.075611927452333, 7.0720877627223455,
				7.06007125246869, 7.034478730375333, 7.057160790024758,
				7.036718930148481, 6.994889214608129, 7.008609656063616,
				7.018032404133684, 7.021080868526872, 6.996284466176992 };
		long[] nodes = { 268784109l, 2967837189l, 2963138086l, 268782312l,
				268782312l, 2963004979l, 1026110120l, 1122262977l, 1324662364l,
				352768106l, 2146362252l, 2259838874l, 132500930l, 2146362252l };
		for (int i = 0; i < 14; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding15RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26623311010259, 49.235639898312535,
				49.25517567045739, 49.24261735246829, 49.25094891935828,
				49.250746175056406, 49.25793916539819, 49.26446449606807,
				49.241766855287246, 49.26080949710475, 49.251400297849564,
				49.23615585908283, 49.256362003904044, 49.261757554823475,
				49.251840696927324 };
		double[] longitudes = { 7.057358204078153, 7.039588258064649,
				7.057622637661674, 7.05596741967242, 7.070809249048338,
				7.037338013153745, 7.000756245131318, 7.002789994472999,
				7.033020472308596, 7.000938739406266, 7.066237103289395,
				6.996539479286739, 7.011055412103328, 7.068084109590819,
				7.045308349558371 };
		long[] nodes = { 2963004962l, 1267364959l, 823700199l, 1323383378l,
				268784109l, 1391280279l, 352768109l, 3406862381l, 1020821996l,
				3406862376l, 268784109l, 2146362252l, 3406862359l, 324406348l,
				375768661l };
		for (int i = 0; i < 15; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding16RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.236701072926785, 49.24505016337112,
				49.25059968198551, 49.26606319343529, 49.246708439294906,
				49.26033763157539, 49.26705712908575, 49.24477929414044,
				49.25904043129335, 49.24419469425098, 49.26916234568329,
				49.244543468209216, 49.23688998399221, 49.236679623296176,
				49.24215741584694, 49.26311656920182 };
		double[] longitudes = { 7.039502179211476, 7.062559467888588,
				7.019029862222288, 7.029376230187854, 7.0323171557978394,
				7.007083372578666, 7.008460569475839, 7.008727959874284,
				7.007561455982637, 7.026824389108642, 7.013873037856733,
				6.996260539394315, 7.01480139953253, 7.055611043323233,
				7.003092761332268, 7.034390392762223 };
		long[] nodes = { 1267364959l, 268784103l, 292134479l, 132500921l,
				374390224l, 343388552l, 3406878006l, 2146362252l, 1305926264l,
				704434334l, 1159920228l, 494064141l, 2259838874l, 267354138l,
				2146362252l, 1698369039l };
		for (int i = 0; i < 16; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding17RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.23698453667612, 49.2404619891915,
				49.25198715017127, 49.251082549632414, 49.24856710088203,
				49.26723957798923, 49.258252380222345, 49.23818472646801,
				49.23697469676363, 49.238535308085545, 49.2535150615654,
				49.24687334874653, 49.25150955202523, 49.24259888767044,
				49.268916546064354, 49.259186059704746, 49.26131518451693 };
		double[] longitudes = { 7.012932748112163, 7.080014125536391,
				7.062511617291519, 7.070869530901298, 7.072887093533539,
				7.02320915278061, 7.062176180100464, 7.000627863610915,
				7.000661473023341, 7.041890753319604, 7.029674709769488,
				7.022686089704244, 7.023176365631569, 7.004578233605222,
				7.049800183008175, 7.006314039702605, 7.040655205333623 };
		long[] nodes = { 2259838874l, 268784101l, 1122262960l, 268784109l,
				306582710l, 1159920412l, 823700267l, 2146362252l, 2146362252l,
				268783364l, 3022431862l, 105825798l, 1698343716l, 2146362252l,
				2963004976l, 1305926264l, 3282143799l };
		for (int i = 0; i < 17; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding18RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25450539590686, 49.25055545637233,
				49.257976068175786, 49.24824852714828, 49.26967297850617,
				49.26288518087652, 49.26201589987617, 49.25068634059291,
				49.26795864575143, 49.2390858377096, 49.24753879323959,
				49.26571722809538, 49.248879513614575, 49.27013318795147,
				49.26080131410897, 49.25709716140031, 49.239614616913904,
				49.23673748944258 };
		double[] longitudes = { 7.050299885138436, 7.006993545503229,
				7.065159020927019, 7.043594421805111, 7.046592438811591,
				7.045961873303725, 7.01478638623878, 7.077725323043229,
				7.009073202883122, 6.998858425726344, 7.011360152891597,
				7.031307687754872, 7.023544674281978, 7.064744656744846,
				7.066995406483933, 7.006835739735972, 7.003297019615327,
				7.074650342780685 };
		long[] nodes = { 1700009878l, 2291478207l, 324406058l, 1041072193l,
				1426601023l, 3282143798l, 1159920649l, 306582711l, 3406878006l,
				2146362252l, 2146362274l, 1610682503l, 292134479l, 2963136665l,
				324406040l, 343388547l, 2146362252l, 268784100l };
		for (int i = 0; i < 18; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding19RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26178830976424, 49.239623189920344,
				49.24969896801718, 49.23674150220309, 49.23780904617231,
				49.26809707726348, 49.25591572855954, 49.237950577312105,
				49.249474650517335, 49.25692413832609, 49.25888240194935,
				49.26000699320143, 49.235252034673124, 49.24188119306366,
				49.2363857274862, 49.23991281926134, 49.266383334840114,
				49.26975335881073, 49.262664796732665 };
		double[] longitudes = { 7.059241466192151, 7.021204338080577,
				7.049785596558829, 7.039394278606143, 7.010253294749911,
				7.008807381170853, 7.011387782927258, 7.066049959403614,
				7.079267873103512, 7.061768828990446, 7.04404686638552,
				7.034034430136029, 7.0330035967277125, 7.028680872716967,
				7.02991070685909, 7.066822301149786, 7.030598144234032,
				7.08073206352247, 7.0521664581479975 };
		long[] nodes = { 374378056l, 2259838874l, 1289529873l, 1267364959l,
				2259838874l, 3406878006l, 3406862359l, 267354164l, 306582711l,
				823700225l, 156965205l, 1698370146l, 1028316251l, 353717202l,
				1139168403l, 268784100l, 1610682503l, 268782322l, 1415963947l };
		for (int i = 0; i < 19; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding20RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26858559788342, 49.26404959320334,
				49.27150907040739, 49.23730219037275, 49.26278806593924,
				49.23561860784339, 49.267108490604755, 49.2519752117731,
				49.244521697968324, 49.271384653207924, 49.25294250846047,
				49.23498705845189, 49.2585393697637, 49.257717362677965,
				49.23883790241863, 49.26150367141654, 49.251736525958826,
				49.26414618935051, 49.23709977264471, 49.23930230710379 };
		double[] longitudes = { 7.0819946299962195, 7.075356872541183,
				7.063191190862345, 7.034239596684165, 7.0583003806342335,
				7.011593026836637, 7.061887953938742, 7.050175795545028,
				7.015398144564099, 7.054792702193847, 7.044993813370255,
				7.003939722650333, 7.011138221760696, 7.03143406813079,
				7.053906793953025, 7.0585902350817475, 7.079694637340783,
				7.081537599016298, 7.024817711667894, 7.012244694406764 };
		long[] nodes = { 2963136678l, 268782314l, 2963136710l, 268783351l,
				374378056l, 2259838874l, 1139485991l, 374383910l, 2146362252l,
				2963004966l, 374385035l, 2146362252l, 3406862359l, 823700132l,
				1323383374l, 374378056l, 306582711l, 2963170300l, 1392022330l,
				2259838874l };
		for (int i = 0; i < 20; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding21RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.2620047085615, 49.25244039679147,
				49.240942983039425, 49.26175704740368, 49.25434563412925,
				49.24709208856498, 49.23779904493324, 49.24874748866244,
				49.23997751457097, 49.24806049809266, 49.23638336735913,
				49.24100216418747, 49.26819480630296, 49.23640512046841,
				49.2504268463613, 49.26202259301082, 49.25037226900743,
				49.245356862121966, 49.24864031720495, 49.255337987199674,
				49.235106513114815 };
		double[] longitudes = { 7.011000274553229, 7.017811374579824,
				7.067746566814487, 7.049387478312753, 7.033753073609044,
				6.999055645687575, 7.034800512015966, 6.9983852932603225,
				7.076520098365094, 7.0130615348389815, 7.068122804997396,
				7.06464370217077, 7.011948717815341, 7.044826010925047,
				7.024864004758859, 7.005984157677001, 6.997665195953564,
				7.061593982578593, 7.038318318188287, 7.059099229770695,
				7.054969958243271 };
		long[] nodes = { 3406862375l, 3110133797l, 268784100l, 271387241l,
				470216336l, 292496531l, 268783351l, 292496531l, 268784101l,
				342911815l, 275916808l, 268784100l, 1805802949l, 268783361l,
				292134071l, 343388555l, 292499984l, 973638483l, 1502048409l,
				823700193l, 267354136l };
		for (int i = 0; i < 21; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding22RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25530336098957, 49.24675061600451,
				49.262893375255395, 49.271649268552785, 49.25869264606677,
				49.24006679408341, 49.26129494687193, 49.24846298284203,
				49.26650465870609, 49.25699595065555, 49.256875808433094,
				49.27089757110324, 49.25520858580812, 49.26512137422992,
				49.250004279617144, 49.26524696582323, 49.254188758159636,
				49.25289780290341, 49.26081930043267, 49.25748324654588,
				49.24550653192628, 49.24104275562294 };
		double[] longitudes = { 7.051109449192652, 7.0722053231902215,
				7.062302570268641, 7.002726086343884, 7.011694428337082,
				7.009588735706793, 7.001978125646667, 7.064794232384146,
				7.052856365250594, 7.002341765509054, 7.059104391289048,
				7.002657922358717, 7.0755921400222155, 7.063566584684548,
				7.031928025407385, 7.007243315563151, 6.998342573899498,
				7.050614164483371, 7.060279062310746, 7.015632260651764,
				7.0572240406135425, 7.0580059750938915 };
		long[] nodes = { 374403163l, 268784103l, 1501846412l, 3406878006l,
				3406862359l, 2146362252l, 3406862376l, 1122263144l,
				2963005004l, 352768108l, 823700208l, 3406878006l, 268779773l,
				1139485991l, 1026109925l, 3406862387l, 352768103l, 374383311l,
				324406325l, 3406862356l, 117589014l, 272677216l };
		for (int i = 0; i < 22; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding23RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26779334790377, 49.237397359217425,
				49.25471030033574, 49.263327816682754, 49.24937788441125,
				49.25436864227897, 49.241764352505456, 49.26754098153679,
				49.259296675473664, 49.26632093912106, 49.24998133580356,
				49.23525905089001, 49.25488700087797, 49.23759635589938,
				49.245592495746266, 49.27100276591335, 49.26572059118701,
				49.2398001937948, 49.23638094059043, 49.26235646496491,
				49.24000002331575, 49.24410474356757, 49.27196446697949 };
		double[] longitudes = { 7.007525478777204, 7.045719575531396,
				7.000014440783687, 7.070167410228037, 7.000067640328731,
				7.036753088716263, 7.041217857282017, 7.065336173756087,
				7.0748889837913085, 7.068884676225066, 7.05285061644784,
				7.074714492269102, 7.06913910593447, 7.007677794583758,
				7.0069967400348325, 6.995760923728767, 7.0535103694784915,
				7.005001212025412, 7.011834682969155, 7.046884476080156,
				7.049258701491982, 7.078838812941722, 7.0357657806272265 };
		long[] nodes = { 3406878006l, 268783361l, 352768104l, 268782314l,
				292496531l, 1035552891l, 919166426l, 1139485991l, 1122263171l,
				1139485991l, 1039334602l, 268784100l, 1122263300l, 2146362252l,
				2146362274l, 3406862374l, 2963004965l, 2146362252l,
				2259838874l, 3282143798l, 3419935283l, 268784101l, 1028710293l };
		for (int i = 0; i < 23; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding24RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26713107099075, 49.242829910023204,
				49.25134251102798, 49.23733430961505, 49.249784050998365,
				49.24943397515729, 49.256367753311544, 49.26476009976944,
				49.24012759415702, 49.235272763788934, 49.26561063689222,
				49.25221646292267, 49.25991671884262, 49.2652252062029,
				49.2551941295339, 49.26823027094157, 49.2603386845671,
				49.24047913473636, 49.253769961345384, 49.268603968695324,
				49.26150032480249, 49.24408555260898, 49.23513653901346,
				49.248256037353855 };
		double[] longitudes = { 7.0765078999778135, 7.009440017657357,
				7.071633733393234, 7.013213140582834, 7.061647166447902,
				7.036185798055929, 7.023629065364781, 7.078623946581184,
				7.0457878258251405, 7.015190926936223, 6.996788842174565,
				7.0593880179518695, 7.053361733162387, 7.017915044921958,
				7.025165884036106, 7.0169262640465755, 7.061167863969607,
				7.028737686827461, 7.002811922468108, 7.067485717576302,
				7.0198159407006075, 6.9983448994450725, 6.996932539335685,
				7.010487908429585 };
		long[] nodes = { 268782323l, 2146362252l, 306582710l, 2259838874l,
				1122262860l, 268783204l, 704434344l, 268782317l, 1267364982l,
				1392022330l, 3406862374l, 374376806l, 704434378l, 1159920468l,
				704434344l, 1159920651l, 324406325l, 353717202l, 278526285l,
				2963136672l, 997708279l, 494064141l, 2146362252l, 2257371790l };
		for (int i = 0; i < 24; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding25RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.252642944122925, 49.264662762410445,
				49.23696963468722, 49.264011349286086, 49.26939813492556,
				49.24459344459985, 49.260738231422735, 49.25449409918116,
				49.24294661350969, 49.243313866483675, 49.254048274401946,
				49.26559658733013, 49.249389429143434, 49.247614497688765,
				49.242650416582535, 49.249618579757836, 49.266773739863226,
				49.241373319837535, 49.256931351434226, 49.26969676902467,
				49.24913549143627, 49.2427840611006, 49.258333522462145,
				49.23779470570527, 49.24782430547254 };
		double[] longitudes = { 7.031638498327364, 7.006535905405127,
				7.0326869627116375, 7.028030011143445, 7.065608477834645,
				7.022038648156987, 7.079418507009141, 7.067259368168838,
				7.073120732877518, 7.0570491755558225, 7.055251800054407,
				7.014712694951784, 7.006443243003587, 7.038664780767104,
				7.032236867374831, 7.004241495391802, 7.002693405341964,
				7.008108197711647, 7.032357198625322, 6.997291991542391,
				7.050711556461338, 7.065228677293358, 7.058183665763424,
				7.052455899331709, 7.037292938035306 };
		long[] nodes = { 1558424942l, 3406862383l, 1028316121l, 1610682489l,
				2963138086l, 2919395944l, 2459662696l, 1323734163l, 268784101l,
				1323383379l, 3181272412l, 1159920007l, 2291478207l, 374389957l,
				374390766l, 494064141l, 3406862384l, 2146362252l, 823700107l,
				3406862377l, 374397867l, 268784100l, 823700228l, 679063955l,
				374389984l };
		for (int i = 0; i < 25; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding26RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25716818398248, 49.24994488580598,
				49.23979734780514, 49.23944204035124, 49.2405110684592,
				49.25213881324639, 49.25754115964994, 49.26080196979874,
				49.24728098231497, 49.252887969822304, 49.244457929083985,
				49.247808902150815, 49.23824151486397, 49.23960624946273,
				49.247047192985704, 49.2445406126451, 49.26673296343212,
				49.249636883628305, 49.237424632990475, 49.2376802676441,
				49.25656204380685, 49.25935309243851, 49.257772421355256,
				49.24725391451522, 49.26996358746253, 49.25943408054884 };
		double[] longitudes = { 7.059057363162743, 7.018314630253207,
				7.046120407671318, 7.010509642109444, 7.047561348937342,
				7.055470582870329, 7.054954481502587, 7.035148219785551,
				7.021029040683133, 7.046359996663183, 7.004842476800532,
				7.02116329137225, 7.067868772768442, 7.065434203405429,
				7.06213889515201, 7.040996694032458, 7.0712626022785035,
				7.038116170205027, 7.043867786351565, 7.047166138635161,
				7.009865769252131, 7.070239146111552, 7.029857572935048,
				7.013856913279426, 6.995008965078798, 7.0421787921703 };
		long[] nodes = { 823700208l, 342911809l, 1267364982l, 2146362252l,
				268783359l, 374404672l, 374376356l, 1698369027l, 2257446597l,
				374384596l, 2146362274l, 2257446597l, 268784100l, 267354164l,
				973638480l, 919166426l, 2963138035l, 268783201l, 268783361l,
				1267530928l, 3406862359l, 268782306l, 1391324469l, 2146362274l,
				919166536l, 704434335l };
		for (int i = 0; i < 26; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding27RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.252792193533665, 49.24292119696602,
				49.25260576551273, 49.23617001951855, 49.26240294096157,
				49.2495075831286, 49.26105815815547, 49.261290046547956,
				49.239386408297435, 49.260573576166244, 49.24348486165703,
				49.249513284909455, 49.26170497487902, 49.265243660161985,
				49.23573393908131, 49.26569355371773, 49.248600313764925,
				49.25098351985752, 49.25489066376896, 49.242136798121294,
				49.2560970081791, 49.23884932566259, 49.239998000372864,
				49.251969589436236, 49.26984661167316, 49.25253661923298,
				49.24003189630871 };
		double[] longitudes = { 7.037178644517296, 7.0347914998486285,
				7.039779855609672, 7.02045035791817, 7.063476130267654,
				7.077123516511145, 7.029110272600572, 7.031764471924079,
				7.015937445434016, 7.000422921757196, 6.998060439360778,
				7.009197190176872, 7.026859865001483, 7.011011919065546,
				7.0441087029729275, 7.045183075155869, 7.038510048618812,
				6.996112914614153, 7.050777237790143, 7.029271344565606,
				7.065927895812512, 7.065736864291388, 7.0052454841236615,
				7.020222757445602, 7.010643442428843, 7.034112598114061,
				7.04930920336609 };
		long[] nodes = { 1035553012l, 1558424821l, 1033294342l, 1392022330l,
				324406354l, 306582710l, 289243619l, 279897251l, 2259838874l,
				3406862377l, 494064141l, 132500951l, 1551745864l, 1805803034l,
				268783361l, 2963004999l, 1502048409l, 292499984l, 1700009731l,
				353717201l, 268783196l, 267354164l, 2146362252l, 1698343730l,
				3406878006l, 1558424937l, 3419935283l };
		for (int i = 0; i < 27; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding28RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.249950087798574, 49.26298967242327,
				49.240947984562624, 49.24490099052741, 49.26218480086528,
				49.2561322848799, 49.24231911965233, 49.2488655260316,
				49.26263391455505, 49.258322054020454, 49.27032573061651,
				49.267439744159134, 49.2600672422936, 49.25920373472076,
				49.24624692233799, 49.23665969206619, 49.255764640280475,
				49.24179672380237, 49.23997600809413, 49.250751537602405,
				49.27171217523067, 49.26373541375844, 49.26786692832986,
				49.269512406117535, 49.270255420471386, 49.26189148556247,
				49.23799067472556, 49.26494238610145 };
		double[] longitudes = { 7.072334849417535, 7.022572768916287,
				7.04469513425242, 7.040139326083962, 7.019680120025647,
				7.034297774688321, 7.07293538796095, 7.038020078459966,
				7.0513936855506225, 7.026879764148923, 6.995469077461188,
				7.045380966663255, 7.063905747496433, 7.038728480545799,
				6.996536817224557, 7.003534551331759, 7.054325605634518,
				7.043167691255778, 7.008334492798508, 7.05482331346803,
				7.0755193493965, 7.036540880082085, 7.0383407374024305,
				7.0274360208591675, 7.009884394287474, 7.043142893628044,
				7.028299258714523, 6.999786165647198 };
		long[] nodes = { 306582710l, 997708279l, 1267364982l, 1535754818l,
				1319116005l, 267461721l, 268784101l, 295135757l, 1424436299l,
				3406862358l, 3406862374l, 365418902l, 823700284l, 1041072266l,
				292496531l, 2146362252l, 374376439l, 919166426l, 2146362252l,
				1024730493l, 2963136675l, 132500913l, 132500916l, 1028710407l,
				3406878006l, 3282143804l, 725041419l, 3406862377l };
		for (int i = 0; i < 28; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding29RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.2484406549635, 49.256322789678904,
				49.25207120513922, 49.23834571373777, 49.2605419030244,
				49.269700251309686, 49.25709823546379, 49.258932697388644,
				49.25948883130127, 49.25883066189765, 49.26263610535717,
				49.25184382401717, 49.25125265887919, 49.24650892685937,
				49.2671049875654, 49.265130304462076, 49.266402544265716,
				49.2624694252455, 49.262503684716776, 49.26808483797622,
				49.23943456852744, 49.23574909011808, 49.2471102820495,
				49.237191952234646, 49.25538754294815, 49.23637171169115,
				49.26596655566233, 49.25066452753712, 49.254065326008465 };
		double[] longitudes = { 7.0622621398018826, 7.023194914922496,
				7.049592201388243, 7.032297055915282, 7.007239944793954,
				6.998739305793431, 7.080220747350052, 7.016804591955974,
				7.078756461727139, 6.996465068424882, 7.075206372225065,
				7.0785591902046345, 7.0085244641148225, 7.060312606773678,
				7.020251504542909, 7.034711458498771, 7.051435970619996,
				7.080607277439552, 7.004682433560341, 7.072013853457944,
				7.003774204164281, 7.044997108342879, 7.0211194301875475,
				7.008063290433826, 7.026445848175043, 7.038134038651125,
				7.027791104698307, 7.0722982472125775, 7.0372472582837755 };
		long[] nodes = { 1122263144l, 704434344l, 3408727254l, 268783211l,
				343388552l, 3406862384l, 2967837189l, 3406862356l, 2967837189l,
				3406862374l, 268782312l, 306582711l, 494064143l, 268784106l,
				1159920035l, 3406877996l, 2963004965l, 2459662705l, 132500940l,
				268782327l, 2146362252l, 268783361l, 2257446578l, 2259838874l,
				1698335939l, 1267364977l, 1610682506l, 306582710l, 1035552831l };
		for (int i = 0; i < 29; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding2RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.268725973971634, 49.25269592531346 };
		double[] longitudes = { 7.0334761752297625, 7.074804254478077 };
		long[] nodes = { 343388603l, 306582711l };
		for (int i = 0; i < 2; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding30RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.266241895467104, 49.24137205688813,
				49.25837563554127, 49.242755512170625, 49.25520695450709,
				49.25532726950861, 49.24492231256983, 49.23952793441289,
				49.241277567041294, 49.24808968290645, 49.24265375027629,
				49.27212754607693, 49.26265640074714, 49.243294859266456,
				49.26064522388193, 49.255342838883415, 49.23904523472923,
				49.245860039902695, 49.236317483897516, 49.246767767031486,
				49.26086661657048, 49.257016201512705, 49.24568346997781,
				49.2562989315472, 49.26832393700959, 49.26251054279633,
				49.26858411521298, 49.2646581159586, 49.25351032673509,
				49.25251961770566 };
		double[] longitudes = { 7.055819189134782, 7.0698753838222315,
				7.0573040254977055, 7.059404764721, 7.010614142696378,
				7.0821453355337205, 7.0308168431141125, 7.026939997261824,
				7.064506393759112, 7.042532848070859, 7.0015540994087155,
				7.0592991746556395, 7.027608965848344, 7.050189714132115,
				7.074194323344602, 7.042264158655027, 7.014176783888874,
				7.021789690663804, 7.00955469197934, 7.033815732637313,
				7.076296955645741, 7.0020995268396495, 7.047423582644787,
				7.028500041799069, 7.076966209591166, 7.029022047848846,
				7.020272704600702, 7.024095390214014, 7.014885433447981,
				7.031460926122917 };
		long[] nodes = { 2963004984l, 268784100l, 823700228l, 267354164l,
				3406862359l, 268779773l, 704434392l, 1392021570l, 268784100l,
				2338151781l, 494064142l, 2963004979l, 289243611l, 268783509l,
				268782309l, 819759295l, 2259838874l, 268783208l, 2259838874l,
				374390203l, 2459662684l, 352768108l, 374399298l, 1551745835l,
				268782323l, 289243619l, 132500930l, 997708279l, 3110133797l,
				2962755855l };
		for (int i = 0; i < 30; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding31RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26431273409821, 49.25648200305764,
				49.252074724867946, 49.2525181313144, 49.26298680051187,
				49.26943678050272, 49.269624007972354, 49.24903216120964,
				49.257037278253996, 49.2668689173944, 49.25148432075945,
				49.250924623963805, 49.26576523972822, 49.24491035662799,
				49.24009076633581, 49.235096034215395, 49.27047917252466,
				49.24839295683251, 49.26482386787182, 49.24782571042406,
				49.258753007187735, 49.243574882610744, 49.27203997358308,
				49.268807680726596, 49.26994754687674, 49.26683305288647,
				49.2556108852527, 49.247383483974126, 49.23842109579303,
				49.25508972843906, 49.26098315103921 };
		double[] longitudes = { 7.02707941556506, 7.006403990546028,
				7.025169783766631, 6.996453502991099, 6.995611147805322,
				7.013231199533214, 7.052312372125939, 7.000019661360027,
				7.055772748869822, 7.000548038491969, 7.068612861018644,
				7.004751304013916, 7.055665369507859, 7.036744565937184,
				7.076680007989467, 7.000624257576345, 7.0490437787374365,
				7.078653414789931, 7.022181138932576, 7.069006272514711,
				7.05666099772038, 7.003134582237298, 7.054530942155886,
				7.005242293206293, 7.0468541173159345, 7.015561337543649,
				7.000451595127722, 7.019272179245669, 7.017485472692046,
				7.011067552907333, 6.9958819123176905 };
		long[] nodes = { 1610682489l, 352768107l, 704434325l, 292496562l,
				919166536l, 1805802949l, 2963004996l, 292496531l, 324406197l,
				3406862381l, 268784109l, 292496531l, 2963005004l, 374389984l,
				268784101l, 2146362252l, 2963004971l, 306582710l, 1159920162l,
				268784109l, 324406236l, 2291478207l, 2963004987l, 3406878006l,
				1426601023l, 1159920228l, 352768106l, 2257446609l, 2259838874l,
				3406862356l, 919166536l };
		for (int i = 0; i < 31; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding32RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26655688888577, 49.24572412901529,
				49.255803316584704, 49.23929568744719, 49.253164963973326,
				49.26741422952434, 49.25009025924468, 49.25917030496867,
				49.26150897766738, 49.25999268974829, 49.24892636191979,
				49.245883052773245, 49.24990571787145, 49.24736525016168,
				49.25357454137482, 49.23809428195852, 49.26416819607341,
				49.25093591215907, 49.242700459290106, 49.237652855292346,
				49.25234595176251, 49.25550221828332, 49.2607297931677,
				49.26040662989133, 49.25027192066732, 49.25920350326562,
				49.24207222298599, 49.25225515581766, 49.25462740238306,
				49.26794678942815, 49.23640065233929, 49.261353467830496 };
		double[] longitudes = { 7.053932627327825, 6.996032329857284,
				7.0444955671501255, 7.032941432451167, 7.031094212170628,
				7.063256523531643, 7.0021665995916536, 7.0248479335569325,
				7.066976570747841, 7.0728009831251635, 7.00862876898619,
				7.051029180252299, 7.000588512941234, 7.065106792378547,
				7.033205331944094, 7.006850487967113, 7.003654153391174,
				7.006615561553273, 6.996616507737877, 7.038907633128983,
				7.015401261780788, 7.027612114264907, 7.00872388451014,
				7.040369410471472, 7.050858024722966, 7.032558531791286,
				7.065788937376435, 7.071075605038012, 7.001643124323077,
				7.067864328676567, 6.99572040329035, 7.018416161551905 };
		long[] nodes = { 2963005004l, 292496531l, 344446161l, 268783211l,
				1558424964l, 1139485991l, 292496531l, 1551745856l, 324406348l,
				2967837193l, 132500951l, 374379177l, 292496531l, 973638480l,
				1391416652l, 2146362252l, 3406862381l, 2291478207l, 494064141l,
				1267364959l, 2257371813l, 1698335939l, 1805802795l, 823700139l,
				1289530016l, 784650319l, 268784100l, 306582712l, 352768103l,
				2963138065l, 2146362252l, 1319116005l };
		for (int i = 0; i < 32; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding3RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25150194811526, 49.2448258879572,
				49.26539801403461 };
		double[] longitudes = { 7.065394922335896, 7.027075352308551,
				7.043326529870718 };
		long[] nodes = { 268784109l, 704434360l, 1429432293l };
		for (int i = 0; i < 3; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding4RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.26238491873381, 49.26877993966291,
				49.236015309786126, 49.23948924283085 };
		double[] longitudes = { 7.041125131862037, 7.065646339423899,
				7.054030523083068, 7.008104862218485 };
		long[] nodes = { 1429431994l, 2963138086l, 1323383376l, 2146362252l };
		for (int i = 0; i < 4; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding5RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25432420355019, 49.272005486384835,
				49.25805553699839, 49.24695534344534, 49.24065457009001 };
		double[] longitudes = { 7.071462297304308, 7.0127316422973625,
				7.077181506183268, 7.056593057251289, 7.025142158869259 };
		long[] nodes = { 306582712l, 1159920651l, 1122263171l, 289943752l,
				1392022358l };
		for (int i = 0; i < 5; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding6RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25034914570739, 49.257322691402436,
				49.269689677894256, 49.25201503352992, 49.247266884122276,
				49.23677770806736 };
		double[] longitudes = { 7.061600781815585, 7.044538185074222,
				7.002640052004811, 7.029393856025119, 7.032052058892263,
				7.046304700750913 };
		long[] nodes = { 1122262860l, 535606983l, 919165735l, 1558424920l,
				374392218l, 1267530950l };
		for (int i = 0; i < 6; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding7RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.243440069284304, 49.244391395281355,
				49.26943378902214, 49.23511270988291, 49.256062689206054,
				49.24184309868326, 49.26828156750806 };
		double[] longitudes = { 7.079491664976777, 7.064399236665138,
				7.049037473762725, 7.011173372147684, 7.002558900806145,
				6.9949092863074105, 7.035893781342782 };
		long[] nodes = { 268784101l, 268784101l, 2963004976l, 2259838874l,
				352768106l, 494064141l, 132500918l };
		for (int i = 0; i < 7; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding8RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.25290746458695, 49.252930655447614,
				49.24390006850739, 49.264803659101155, 49.249026397899435,
				49.24718486800978, 49.23951637341281, 49.24536750564127 };
		double[] longitudes = { 7.001849085720539, 7.0263357704900535,
				6.997681590036068, 7.042621610383642, 7.072194121181062,
				7.061192250880482, 7.022263867639892, 7.027333100524897 };
		long[] nodes = { 292499984l, 832835414l, 494064141l, 1429432005l,
				268784109l, 973638480l, 1392022367l, 295136212l };
		for (int i = 0; i < 8; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding9RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.23815218789278, 49.25100912475406,
				49.24365589197762, 49.24146693814978, 49.26455811242696,
				49.26961391858757, 49.27208494934185, 49.25327433760603,
				49.25217621287046 };
		double[] longitudes = { 7.011642151315459, 7.032728601112406,
				6.9989102216015215, 7.041491757054343, 7.063393281454677,
				7.015294286630249, 7.026706116096917, 7.062548347175988,
				7.049846526851852 };
		long[] nodes = { 2259838874l, 615421736l, 494064141l, 268783363l,
				1139485991l, 1159920651l, 1028710111l, 315270568l, 3408727254l };
		for (int i = 0; i < 9; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

}