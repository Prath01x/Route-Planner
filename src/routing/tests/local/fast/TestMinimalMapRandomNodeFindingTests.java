package routing.tests.local.fast;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import routing.Coordinate;
import routing.Node;
import routing.NodeFinder;
import routing.tests.TestingBase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestMinimalMapRandomNodeFindingTests extends TestingBase {

	@Before
	public void setUp() {
		getNodeFinder();
	}
	
	@Override
	public String getMapFileName() {
		return "minimal.nae";
	}

	@Test(timeout = 1000)
	public void testNodeFinding10RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.002104779260481679, 0.0018665866485710672,
				0.0016348967853203993, 0.0013349928110327615,
				0.004842707852614725, 0.005850465686238309,
				0.0019212643166506818, 0.0032825096561553604,
				0.003895931399890783, 0.002278033715452328 };
		double[] longitudes = { 0.005373386788206602, 0.004233659795219662,
				0.004055210264717423, 0.004619714756457071,
				0.002954719411636221, 0.002671847299002329,
				0.005304643020974366, 0.003887985343070494,
				0.0011656177770583245, 0.004433590352944216 };
		long[] nodes = { 1l, 1l, 1l, 1l, 3l, 4l, 1l, 2l, 4l, 1l };
		for (int i = 0; i < 10; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding11RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0026133963664288825, 0.00453425645377469,
				0.0056712823277544405, 0.0021171589798183506,
				0.0033919674263888887, 0.0013252985624188389,
				0.005411083207479992, 0.0023726869451375174,
				0.004077975064673788, 0.0014144488389644964,
				0.005805142838485133 };
		double[] longitudes = { 0.0023812835490544804, 0.005407296525487227,
				0.0028589765816663406, 0.005967995451813583,
				0.005194929256182963, 0.0016734370694228514,
				0.0017773592958505665, 0.0012893395280710127,
				0.003379446666278868, 0.0026813396623452616,
				0.005188861590908767 };
		long[] nodes = { 3l, 2l, 4l, 1l, 2l, 2l, 4l, 3l, 3l, 2l, 3l };
		for (int i = 0; i < 11; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding12RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.004348344607146945, 0.0015795944390109627,
				0.0031614113879318557, 0.005332687137810815,
				0.003890668561864966, 0.0012083424155827419,
				0.003125366137975424, 0.0039251081212435465,
				0.0035162881834573216, 0.004451642760574818,
				0.004017550199423618, 0.0013803597808455738 };
		double[] longitudes = { 0.0038014387611416092, 0.005175518055338575,
				0.004543740226475727, 0.0014947206590019988,
				0.0038094058220868045, 0.0011240486465341117,
				0.0017439723721378204, 0.0014730810897107334,
				0.005332607328147602, 0.005004846120028021,
				0.0022167810797679203, 0.005463434913262157 };
		long[] nodes = { 3l, 1l, 2l, 4l, 3l, 3l, 3l, 4l, 2l, 2l, 3l, 0l };
		for (int i = 0; i < 12; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding13RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.005752347997966452, 0.0016728588562319189,
				0.005399297765945259, 0.0019571155886357666,
				0.003102825668408411, 0.004643864459699172,
				0.005460978742111986, 0.0015112243140603244,
				0.004782411849957384, 0.0025957590161379703,
				0.005678302694210193, 0.001254588297965726,
				0.004367927085615676 };
		double[] longitudes = { 0.0053487642996985, 0.004123597439704823,
				0.0015497134863574754, 0.004156573800530766,
				0.004054929237015708, 0.002123228427327013,
				0.003000582435384333, 0.0043853876960109174,
				0.0019728097747105664, 0.0022186970312742084,
				0.0037197803144315257, 0.003559511550361449,
				0.005254971868377594 };
		long[] nodes = { 3l, 1l, 4l, 1l, 2l, 4l, 4l, 1l, 4l, 3l, 3l, 1l, 2l };
		for (int i = 0; i < 13; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding14RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.005298773744914256, 0.002398314631298506,
				0.002958292002313621, 0.0026339671198527866,
				0.0021616042692636176, 0.0022576259948187296,
				0.0021821456678507165, 0.003756689321518903,
				0.003012803083816065, 0.004405671796939521,
				0.0015533336172926556, 0.003187528425721585,
				0.004308865316312536, 0.0014675968903964723 };
		double[] longitudes = { 0.0012902328003593585, 0.005777496765580799,
				0.005914800581088967, 0.0036163872458514893,
				0.0016373833593400341, 0.004179507953872691,
				0.0027607101607994757, 0.004290036950431385,
				0.002552541062442657, 0.005779249155301935,
				0.004054102788469864, 0.001949140244575238,
				0.0011271550983872655, 0.004206594243251271 };
		long[] nodes = { 5l, 1l, 1l, 2l, 3l, 2l, 2l, 2l, 3l, 2l, 1l, 3l, 4l, 1l };
		for (int i = 0; i < 14; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding15RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.00463306033889941, 0.002202454099403111,
				0.0046481394416039885, 0.004894262961813934,
				0.002229939649697936, 0.0015078590891427833,
				0.002096501164741361, 0.004858438574504982,
				0.0012561119107744525, 0.0044422801417386085,
				0.0019223319631231348, 0.003990316423729645,
				0.003215316703450904, 0.0012265088657053343,
				0.0041358686305033344 };
		double[] longitudes = { 0.0036680608247743295, 0.0010065237944978996,
				0.005789506653944755, 0.005110768640740531,
				0.0034254073115221034, 0.0041867680660154175,
				0.0021616451467500264, 0.004008447121306257,
				0.00274615480726246, 0.004730243666100757,
				0.0033974774171025134, 0.00540126309793677,
				0.0027930499735334333, 0.002942012374141046,
				0.002546015340021846 };
		long[] nodes = { 3l, 3l, 2l, 2l, 2l, 1l, 2l, 3l, 2l, 2l, 2l, 2l, 3l,
				2l, 3l };
		for (int i = 0; i < 15; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding16RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.003497539877817639, 0.002025073196856196,
				0.00596300231165185, 0.0044101187063704216,
				0.004352849966922774, 0.0052088941956374155,
				0.001737543663636378, 0.00496648882984725,
				0.003589689209030944, 0.002288274024341731,
				0.004405507708438077, 0.0023538887727716498,
				0.0034416113912864206, 0.001939444848927216,
				0.002828186346671512, 0.004279596324124332 };
		double[] longitudes = { 0.004388088019538102, 0.00441101044236161,
				0.00236036946038555, 0.0015427285417175356,
				0.0032528056276523117, 0.004423665863280398,
				0.001040647343679654, 0.0011279608505276454,
				0.001400807099944603, 0.002488043324217732,
				0.0050877863921572316, 0.004984292963643769,
				0.0035888273330707964, 0.0019882484324952707,
				0.004963096507225978, 0.0021709011504686664 };
		long[] nodes = { 2l, 1l, 4l, 4l, 3l, 3l, 3l, 4l, 4l, 2l, 2l, 1l, 2l,
				2l, 1l, 4l };
		for (int i = 0; i < 16; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding17RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0050983722095519395, 0.004774160075047643,
				0.0022870273682742605, 0.002525746047040555,
				0.002012532123711012, 0.004807324343894595,
				0.004582805152733877, 0.00439248838699097,
				0.001885218815076725, 0.0026132793282375366,
				0.004160735720257876, 0.00222740008958708,
				0.004595456518943069, 0.0029074079516222895,
				0.0044538758823464385, 0.0021003376974520786,
				0.0058795589243131885 };
		double[] longitudes = { 0.003781923230218622, 0.001769091408705565,
				0.004202480163267768, 0.003890462913404806,
				0.0032683446690440114, 0.002727093032525535,
				0.0014784161404704085, 0.00214618903334837,
				0.002922839109925737, 0.0026308591053770584,
				0.002411295524020647, 0.005398343559611775,
				0.0033210498347533814, 0.002623927117930876,
				0.0038071479346899126, 0.003276770981280595,
				0.0029945509322132583 };
		long[] nodes = { 3l, 4l, 2l, 2l, 2l, 4l, 4l, 4l, 2l, 2l, 3l, 1l, 3l,
				3l, 3l, 2l, 4l };
		for (int i = 0; i < 17; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding18RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.003778354943846402, 0.0011480985920133615,
				0.005047912123371702, 0.005392818845079872,
				0.004186722043387862, 0.004714098129058912,
				0.0024621181210647417, 0.0029126223687600955,
				0.005723363588315694, 0.00420891410441975,
				0.001459116161262716, 0.0029009886450569304,
				0.005387098717256923, 0.003068516235475079,
				0.0024510166260310086, 0.0028084125190581707,
				0.0020410355006731913, 0.005978617708435092 };
		double[] longitudes = { 0.0030087000882649886, 0.005345732327563117,
				0.002924604843841539, 0.004383021075251763,
				0.001040113185860697, 0.004581105109187787,
				0.005528796763196532, 0.004925546857173277,
				0.005967951500517333, 0.0054027692795277195,
				0.0042976421067089515, 0.004835707960475683,
				0.004989401705533458, 0.0016687940263665317,
				0.0031473025663295716, 0.0012419247290472166,
				0.0012320600860122718, 0.0026667700544633216 };
		long[] nodes = { 3l, 0l, 4l, 3l, 4l, 3l, 1l, 1l, 2l, 2l, 1l, 2l, 3l,
				3l, 2l, 3l, 3l, 4l };
		for (int i = 0; i < 18; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding19RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.00397870361255171, 0.0032759591264350683,
				0.00550783918069532, 0.003214403968065466,
				0.0032004648935413417, 0.0016183780588718806,
				0.00341062299402951, 0.004846238969010333,
				0.0027759503860253464, 0.004827239765534053,
				0.004703621612075512, 0.004052229324449551,
				0.0044615865185240015, 0.005390830532613869,
				0.002298825411833584, 0.003460654906607552,
				0.005713159822443254, 0.005950159275020812,
				0.0036436525538400748 };
		double[] longitudes = { 0.0031908723453631547, 0.003202632256520227,
				0.0025480535653494684, 0.0029988288410782065,
				0.002340651426075732, 0.005010077757237582,
				0.002079080925762009, 0.0039167346742225734,
				0.004718360767638249, 0.00533366835569111,
				0.005338153916433827, 0.0022108988399282253,
				0.0034820174405391703, 0.005995203594547227,
				0.005195558856585885, 0.005845015246939238,
				0.0013052276303267855, 0.002109502050649196,
				0.0014622814143064164 };
		long[] nodes = { 3l, 3l, 4l, 3l, 3l, 1l, 3l, 3l, 2l, 2l, 2l, 3l, 3l,
				2l, 1l, 1l, 5l, 4l, 4l };
		for (int i = 0; i < 19; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding20RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.004463801631350766, 0.0010543013153587457,
				0.005033041085164336, 0.004951886085714305,
				0.0027382177771210804, 0.0017313328948412945,
				0.004110551605274196, 0.0030938371017521756,
				0.003304002945461309, 0.0056147960369698205,
				0.004797846096098443, 0.003208033300622848,
				0.001835190270488439, 0.005112209709363925,
				0.0044549785316598586, 0.0022114622800757993,
				0.003713199055169806, 0.0018286909462545482,
				0.003475901764068369, 0.003095259249375736 };
		double[] longitudes = { 0.003827302014224308, 0.005750715716818925,
				0.003449114137701801, 0.003984092227528522,
				0.003273711324102931, 0.004246168619664589,
				0.005728352412433916, 0.004969676182812086,
				0.0041082188939841925, 0.003789770420376536,
				0.0031332095942302814, 0.0011963520529597296,
				0.005851276274957234, 0.0019372278096166915,
				0.004496629045316185, 0.0028690486746857694,
				0.005144590419350465, 0.0030919606076581156,
				0.0014295427545318836, 0.003952579763884358 };
		long[] nodes = { 3l, 0l, 3l, 3l, 2l, 1l, 2l, 2l, 2l, 3l, 3l, 4l, 0l,
				4l, 2l, 2l, 2l, 2l, 4l, 2l };
		for (int i = 0; i < 20; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding21RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.002814761267913488, 0.004035016578059691,
				0.003982495153462438, 0.0013361096789173052,
				0.005612177923375391, 0.004021794661345963,
				0.0018499119974982985, 0.005147755239284198,
				0.003062338877601195, 0.0044884529957096115,
				0.005384745682857219, 0.0037216734549116756,
				0.003191956326209854, 0.005056386677033485,
				0.005969547980313285, 0.0034436173923663464,
				0.0043736482328512825, 0.005574918472173982,
				0.0032245905455917843, 0.0043308268731675915,
				0.00417071978527871 };
		double[] longitudes = { 0.0034003526688823607, 0.0021244762913779063,
				0.0017382503370124028, 0.004857478233118212,
				0.0059738014992439855, 0.001341752879037438,
				0.0030254813025824175, 0.004240723659252706,
				0.0010306986290823691, 0.005039359989487069,
				0.005367420656877123, 0.004514500570533396,
				0.005451675941252996, 0.0038933145131690096,
				0.0021465647662860295, 0.0011428926239901618,
				0.003847483354979898, 0.002342854759187149,
				0.005525945436030138, 0.003184586465642777,
				0.004459893256654933 };
		long[] nodes = { 2l, 3l, 4l, 1l, 2l, 4l, 2l, 3l, 4l, 2l, 3l, 2l, 1l,
				3l, 4l, 4l, 3l, 4l, 1l, 3l, 2l };
		for (int i = 0; i < 21; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding22RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0029373384423021396, 0.0018691371262013587,
				0.0010481278519860722, 0.002856035698112078,
				0.005177507121190946, 0.004647374453951064,
				0.0023982363496420603, 0.003195370512293906,
				0.005433301021860929, 0.0013537089144874696,
				0.0018212424602024914, 0.002556508962748033,
				0.001361228539538453, 0.0017302656449780587,
				0.004901654426758585, 0.005925355921451474,
				0.003741364617762186, 0.004307043778095208,
				0.0025620584730939797, 0.0029665521454271216,
				0.005807373740964222, 0.0018493364427091849 };
		double[] longitudes = { 0.001875000739607525, 0.002626951867244945,
				0.004952521082099957, 0.0038157293641693, 0.005068195660541961,
				0.0029528810038659615, 0.004160457913552049,
				0.0053397719348488954, 0.004113349281157213,
				0.0012421783718088223, 0.0056316384590971895,
				0.0025657929244895347, 0.004114082778049868,
				0.0037975286839770197, 0.0018545410628848654,
				0.003392970698112544, 0.004689885632948041,
				0.005099356861074132, 0.004805442673365631,
				0.005811647547019114, 0.004690723990351603,
				0.003174557813036374 };
		long[] nodes = { 3l, 2l, 1l, 2l, 3l, 3l, 2l, 1l, 3l, 3l, 1l, 2l, 1l,
				1l, 4l, 4l, 2l, 2l, 1l, 1l, 3l, 2l };
		for (int i = 0; i < 22; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding23RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0020513127399073355, 0.0030520106170386554,
				0.0018708746476036116, 0.0013015958817261227,
				0.004277462469368582, 0.005707647565179873,
				0.0056007505214974536, 0.005963015464124064,
				0.0021649077656419385, 0.0058451139544470395,
				0.0023019290848282714, 0.0021331605945589236,
				0.0016019731911766247, 0.0018655346943328042,
				0.005053289530259038, 0.0045719122665752905,
				0.00493048411806637, 0.005545395132232448,
				0.005735111320804526, 0.0027845063224502657,
				0.00229896688909996, 0.004251056910603578, 0.005153180589193544 };
		double[] longitudes = { 0.0027030059872316767, 0.0012235935690401382,
				0.0017951713470486567, 0.003816397661827076,
				0.004946758163439346, 0.004142181995354594,
				0.005783041137243739, 0.0034290721014849515,
				0.002727172310094096, 0.00308737828549786,
				0.0025831174306629994, 0.0017030393564908127,
				0.0020764176549361, 0.002602223445360206,
				0.0032482004498156783, 0.005794927922143805,
				0.003100142580372713, 0.0016746221574048695,
				0.004812545414812349, 0.002530348384406305,
				0.0033810775682223894, 0.00277680436341142,
				0.0013949574241855958 };
		long[] nodes = { 2l, 3l, 3l, 1l, 2l, 3l, 2l, 4l, 2l, 4l, 2l, 3l, 2l,
				2l, 3l, 2l, 3l, 4l, 3l, 3l, 2l, 3l, 4l };
		for (int i = 0; i < 23; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding24RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.001589476480430322, 0.0034933912777886404,
				0.001061690401968787, 0.003449092408261865,
				0.005997441631472376, 0.004826926676090146,
				0.00439014015206745, 0.0013195649719119182,
				0.002588132409312086, 0.0015659528733641755,
				0.005141386616384595, 0.00598609460094138, 0.00359147335507155,
				0.0017188244924427817, 0.0026935271098302016,
				0.005507805877231436, 0.0041319227180507696,
				0.001552950499279874, 0.001051760642342334,
				0.005215932232206553, 0.004219888021848939,
				0.003653729130556515, 0.004349136751731931,
				0.0031455520449545056 };
		double[] longitudes = { 0.002767948892086569, 0.0010966174643928341,
				0.0038478959302872505, 0.004545623896893203,
				0.005270224352762933, 0.0038982575710227634,
				0.003629055312446435, 0.005561464710724497,
				0.0010459158014748057, 0.003995592368613817,
				0.003373710996007299, 0.0013449529027964693,
				0.005367001801251486, 0.0014911608527689083,
				0.005511602773041623, 0.002915117181746349,
				0.0013652582432498036, 0.002798269482036933,
				0.005540802353686211, 0.005065406772705149,
				0.0013452203364552693, 0.00562149545258244,
				0.0035069599596648736, 0.004493821545703951 };
		long[] nodes = { 2l, 4l, 1l, 2l, 3l, 3l, 3l, 0l, 3l, 1l, 3l, 5l, 2l,
				3l, 1l, 4l, 4l, 2l, 0l, 3l, 4l, 2l, 3l, 2l };
		for (int i = 0; i < 24; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding25RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.002017397973374379, 0.001415985477295644,
				0.00147136362975577, 0.003118211151759625,
				0.0032100062102047057, 0.0030832704235564377,
				0.0012941357828519348, 0.001231439537613799,
				0.004817659930234587, 0.004181824292797518,
				0.0042122101415835375, 0.0037497382074353704,
				0.002101933722895373, 0.005857354798883972,
				0.0035013071518114123, 0.0053124600081630126,
				0.004971381660178023, 0.004030820060471486,
				0.003976940255315501, 0.0014025732788649295,
				0.0025375536180491406, 0.0021214226334981025,
				0.002211560689396241, 0.002974623667566915,
				0.005068745354860517 };
		double[] longitudes = { 0.0037273414775548844, 0.004123265973406648,
				0.0013005184844429466, 0.0014446611381706634,
				0.005238720078226342, 0.0020260688938729104,
				0.002873376393654264, 0.0013528638659433885,
				0.005315435805167579, 0.0013225427623073235,
				0.0012458152190349217, 0.0027618341109262754,
				0.0015264338333601216, 0.002766731549580473,
				0.0036214322625030696, 0.0016556531988970303,
				0.0042179175495810906, 0.004628530214021622,
				0.004866868831841306, 0.0026217720493452437,
				0.003854443625421698, 0.005150314175773331,
				0.005366728074622834, 0.0056460213985898185,
				0.005659979599148087 };
		long[] nodes = { 2l, 1l, 3l, 3l, 1l, 3l, 2l, 2l, 2l, 4l, 4l, 3l, 3l,
				4l, 2l, 4l, 3l, 2l, 2l, 2l, 2l, 1l, 1l, 1l, 2l };
		for (int i = 0; i < 25; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding26RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.004402415302892097, 0.00180475305764797,
				0.001387967268369776, 0.004375238165787729,
				0.0010161133099114551, 0.0015220498272009893,
				0.004284905546107106, 0.0023431101219137216,
				0.0033011291235218753, 0.0015767785728488652,
				0.005064241124869215, 0.005935777868251319,
				0.0059391821655784644, 0.0030096130171680733,
				0.0016316881578367424, 0.0035450958653477074,
				0.0027859875673368903, 0.004105405819422189,
				0.0048466737384887, 0.0029720846409985353,
				0.003311145380957044, 0.00363387778439297,
				0.0033965248180245636, 0.0020718929652973417,
				0.0048586891706321675, 0.0011507825566910775 };
		double[] longitudes = { 0.004837461008252874, 0.003937338640067011,
				0.00522063636078922, 0.0014458803699808217,
				0.002883112659455667, 0.0017371469859345492,
				0.004981699064235873, 0.0041351891525236665,
				0.0041902287351581555, 0.0035642664348348716,
				0.001715386784567743, 0.002212361414697196,
				0.0012164331253397605, 0.004295142813509413,
				0.003390051996864749, 0.005097670769951931,
				0.0012063359147877015, 0.004512598796226977,
				0.0012780001075054467, 0.0023529731312846606,
				0.004999998068262824, 0.0010029660139245708,
				0.0032516048896736446, 0.0037671399451518926,
				0.003151697047435472, 0.004202380658288655 };
		long[] nodes = { 2l, 1l, 1l, 4l, 2l, 2l, 2l, 2l, 2l, 2l, 4l, 4l, 5l,
				2l, 2l, 2l, 3l, 2l, 4l, 3l, 2l, 4l, 3l, 2l, 3l, 1l };
		for (int i = 0; i < 26; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding27RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0015974414955023932, 0.004958846732512121,
				0.005797132060489851, 0.0052376571337597036,
				0.005382770441209569, 0.004992228451994277,
				0.0018136570571425622, 0.0038839148538280773,
				0.005968272928666705, 0.003755800472342438,
				0.0020808218713789595, 0.0038441396979437166,
				0.005476762724560703, 0.002016172358890147,
				0.001067448033832861, 0.0032451196788329862,
				0.0018996666224140404, 0.00112547001733481,
				0.005546663341235518, 0.0011397031974393404,
				0.0010513866311869277, 0.0023350082418180126,
				0.003971759415547331, 0.005107083190214499,
				0.004766228518186789, 0.002547643107542256, 0.00493343835825302 };
		double[] longitudes = { 0.005750823198495159, 0.0015734012464055439,
				0.004127365539591147, 0.003162953767943317,
				0.001008593509272733, 0.005582660187193422,
				0.0010770780260994136, 0.0017458518325932284,
				0.0017080982649549568, 0.0014664903148703277,
				0.0024941327544812705, 0.004567458846735599,
				0.004730428370713144, 0.0032342941402116587,
				0.001718088917095185, 0.003523961336999416,
				0.0014750864584787474, 0.0019598690987066474,
				0.005996281776452176, 0.005701866647382374,
				0.0020601836738960155, 0.002745530998614582,
				0.0018101786257654169, 0.0015538290472249191,
				0.004836821517947312, 0.003984559482789186,
				0.005229129039947855 };
		long[] nodes = { 0l, 4l, 3l, 4l, 5l, 2l, 3l, 4l, 5l, 4l, 2l, 2l, 3l,
				2l, 2l, 2l, 3l, 2l, 2l, 0l, 2l, 2l, 4l, 4l, 2l, 2l, 2l };
		for (int i = 0; i < 27; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding28RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0010802717295677242, 0.0013484228232847836,
				0.002418210800201443, 0.004787999530149863,
				0.0011639287634295056, 0.003823790849605249,
				0.005574365945333345, 0.0014213167856603035,
				0.003498379260013426, 0.005656928216650496,
				0.003921950061489058, 0.005928924565617612,
				0.004001838055607737, 0.0050971563605369564,
				0.003478581081790133, 0.004296794142049945,
				0.0012139147258955288, 0.003549836630745147,
				0.005668474895641658, 0.004951509246681392,
				0.0029357478299140843, 0.0024709981436150524,
				0.004943454604067213, 0.004688080516732897,
				0.0022928654271224397, 0.001828437814091543,
				0.0010519825900060717, 0.0015781264032171598 };
		double[] longitudes = { 0.0014753196197192767, 0.0034973649149892053,
				0.0018694543168013985, 0.0036390915713015583,
				0.003641086631072508, 0.004760420383535326,
				0.004387561309130749, 0.0014250541002332681,
				0.0058564221904575135, 0.005289909610380051,
				0.005801353775016238, 0.005985809561887587,
				0.003490802088265921, 0.0056043435518958375,
				0.0036297015565812944, 0.005833298421052749,
				0.004184279512985437, 0.0010118932589351828,
				0.003458173821038366, 0.0026530793248621246,
				0.0023615310102579395, 0.002480118001050509,
				0.005202927385050404, 0.00550343281239875,
				0.0032795597946144593, 0.0047043376643274015,
				0.003760012965776588, 0.0021558108331655723 };
		long[] nodes = { 2l, 1l, 3l, 3l, 1l, 2l, 3l, 2l, 1l, 3l, 2l, 2l, 3l,
				2l, 2l, 2l, 1l, 4l, 4l, 4l, 3l, 2l, 2l, 2l, 2l, 1l, 1l, 2l };
		for (int i = 0; i < 28; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding29RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0037649727355973015, 0.0018862756571352375,
				0.0025265823664322607, 0.004047734367395104,
				0.0051219378088018476, 0.0033801079629425003,
				0.0035587951905947904, 0.0030428695654088726,
				0.0021733798812852254, 0.004414810750872868,
				0.0010657981250947787, 0.0038228989312365535,
				0.0010356622615718238, 0.0015597073397232496,
				0.0055299679369613525, 0.00527193647005536,
				0.002020951913383996, 0.0034643730000464227,
				0.0039906792166739665, 0.0026566158898283683,
				0.0030116579397075956, 0.004674563742171042,
				0.0029321809835216386, 0.004753618357043214,
				0.002757779524428635, 0.004002593322725352,
				0.0037757335339811808, 0.0013312841908737429,
				0.0028106953846139347 };
		double[] longitudes = { 0.004013590463289931, 0.002191977599418829,
				0.0015530897168466139, 0.0012258716395319121,
				0.004678325116182716, 0.0013215818360830525,
				0.0029381507184790276, 0.005742158470190589,
				0.002138802631895799, 0.005520528785268372,
				0.00348754795417561, 0.003876796444664611,
				0.0028345804297773727, 0.005430975544891937,
				0.00146515253350229, 0.0022629411757529197,
				0.003945769581177337, 0.002019442549404871,
				0.0031077624030134724, 0.002600467625701928,
				0.0032229441039920096, 0.001721154728946044,
				0.003231743318404287, 0.0017910054597090738,
				0.004794684724149647, 0.001982679440588616,
				0.002301999519973461, 0.004184605609843095,
				0.0024702452411539816 };
		long[] nodes = { 2l, 2l, 3l, 4l, 3l, 4l, 3l, 1l, 3l, 2l, 1l, 2l, 2l,
				1l, 5l, 4l, 2l, 3l, 3l, 3l, 2l, 4l, 2l, 4l, 1l, 4l, 3l, 1l, 3l };
		for (int i = 0; i < 29; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding2RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.004712510773895661, 0.0020966920929556977 };
		double[] longitudes = { 0.0033658225410053574, 0.0029979133924832244 };
		long[] nodes = { 3l, 2l };
		for (int i = 0; i < 2; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding30RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0013045781381790164, 0.0010339865446557313,
				0.0043781305192017, 0.0033878347322793766,
				0.0053516043103867175, 0.005010603765857004,
				0.00467440831350349, 0.0025982688937652727,
				0.0058200561290239206, 0.0021131958877244417,
				0.002136385751205454, 0.003319248938117056,
				0.001530207724337315, 0.004789517578223619,
				0.0011519588413534051, 0.0031472883417969417,
				0.001646317114305629, 0.002311404103844661,
				0.0035628576630353983, 0.0034723099759045857,
				0.004017526063789273, 0.005211019833095845,
				0.004704904528844055, 0.0027041996155285613,
				0.0023800397556239606, 0.005026941601397286,
				0.005157162563469803, 0.003691106618246437,
				0.004564293253238071, 0.0023399651927811438 };
		double[] longitudes = { 0.0046039357787233635, 0.001886038896058321,
				0.004910381867957688, 0.00483340685242587,
				0.005976276064753415, 0.0034013119462279837,
				0.002810854458901905, 0.004773804967279843,
				0.004958599642675658, 0.001079664636328844,
				0.00567203665231695, 0.0018753081262306989,
				0.00202121104042019, 0.002106365017101817, 0.00361337324049552,
				0.002984670954938489, 0.001370974698689754,
				0.0024883859661169413, 0.00490884845551998,
				0.0044036596218883775, 0.003600074659419614,
				0.0019347400237422195, 0.005515363209750908,
				0.0059518038956460784, 0.001356742808588919,
				0.002286317472945916, 0.0030300187846803864,
				0.0030648125619734128, 0.005062036104232713,
				0.003664083009886702 };
		long[] nodes = { 1l, 2l, 2l, 2l, 2l, 3l, 3l, 1l, 3l, 3l, 1l, 3l, 2l,
				4l, 1l, 3l, 3l, 2l, 2l, 2l, 3l, 4l, 2l, 1l, 3l, 4l, 4l, 3l, 2l,
				2l };
		for (int i = 0; i < 30; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding31RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.00507157631094177, 0.00432260669838093,
				0.003553185684684604, 0.0049312422576447785,
				0.004390933546135112, 0.0018058013813498953,
				0.00254673630126704, 0.003897996819856422,
				0.002981277324097651, 0.005590605529268863,
				0.0019836409931706517, 0.002936765479928447,
				0.005080643838274128, 0.0015094885162891055,
				0.001643670861434784, 0.0023212573642595155,
				0.004237937711993024, 0.0030285972455798425,
				0.0028979445448624784, 0.001654537796778796,
				0.002548030038656191, 0.003722787070964369,
				0.0031060770749155773, 0.004209240353000156,
				0.005752378746873366, 0.0013652677891927492,
				0.002958394828266955, 0.004867330722736108,
				0.0011486815521246255, 0.003091243413715776,
				0.0010138567913074777 };
		double[] longitudes = { 0.004617340943798011, 0.0011563953616228564,
				0.0034435601367141613, 0.0037907678139448868,
				0.0032437462578601413, 0.003944523413170671,
				0.003363260954539952, 0.004030066438949641,
				0.001926167878979592, 0.003743893306291868,
				0.003349073700318883, 0.004169913852056364,
				0.003955340167514237, 0.0023382203583719265,
				0.0030772469699329695, 0.0016455047107685585,
				0.004668291541261058, 0.004756567962697925,
				0.002746777911570332, 0.0023594695466869903,
				0.001006941445996207, 0.0013743899719353516,
				0.0032949613051029, 0.003555929654719112,
				0.0018123300717342535, 0.005471159372422144,
				0.003414318566780173, 0.002375213560371723,
				0.0020809488010326395, 0.004789656526000741,
				0.005994352135188463 };
		long[] nodes = { 3l, 4l, 3l, 3l, 3l, 1l, 2l, 2l, 3l, 3l, 2l, 2l, 3l,
				2l, 2l, 3l, 2l, 2l, 3l, 2l, 3l, 4l, 2l, 3l, 4l, 0l, 2l, 4l, 2l,
				2l, 0l };
		for (int i = 0; i < 31; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding32RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0015664372235413412, 0.0029301519004413454,
				0.002795312985754859, 0.005210200970016891,
				0.004191599046149815, 0.00394638538730876,
				0.005143575665870929, 0.00298515608813125,
				0.004667530451453868, 0.0059229776034040605,
				0.00432907662634598, 0.0049651287875988334,
				0.004160994007500483, 0.004733493259349825,
				0.00561246338721686, 0.0014605463089631357,
				0.004177412616356487, 0.0012321620069431901,
				0.005099067537703458, 0.003034781718858837,
				0.0031651597130424973, 0.0026246481386268568,
				0.001278156884973505, 0.0035481097542170025,
				0.002095035082531879, 0.002710437702267916,
				0.004422337361339311, 0.005502311604821126,
				0.0012684994721756718, 0.0017623768220194488,
				0.003993742918896019, 0.003473433533679167 };
		double[] longitudes = { 0.0020584296433931813, 0.0015794013009525606,
				0.0026069694715000788, 0.0012688400423246874,
				0.003892609127893274, 0.002425257789255536,
				0.001158281536262433, 0.0021995822959967925,
				0.0035528587042234685, 0.0011490231099925766,
				0.003446438043650235, 0.004520236417428668,
				0.005781659151504635, 0.0037724857345860672,
				0.004982557704701353, 0.00565574897130319,
				0.001263313459730027, 0.0012249629354147903,
				0.004714759966137028, 0.004308460133439138,
				0.005278141148360173, 0.0037078829272473323,
				0.005077892532679945, 0.0039183577753833295,
				0.002715891357449797, 0.002379471314776305,
				0.005119472809254298, 0.004235746655197929,
				0.002678509292617494, 0.001664136598599862,
				0.0034500444327094136, 0.004957903539428912 };
		long[] nodes = { 2l, 3l, 3l, 4l, 3l, 3l, 4l, 3l, 3l, 5l, 3l, 3l, 2l,
				3l, 3l, 0l, 4l, 3l, 3l, 2l, 1l, 2l, 1l, 2l, 2l, 3l, 2l, 3l, 2l,
				3l, 3l, 2l };
		for (int i = 0; i < 32; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding3RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.005519493428795445, 0.003503214792964912,
				0.004176748634586851 };
		double[] longitudes = { 0.0050837941211414606, 0.004048746275922992,
				0.005975011688564401 };
		long[] nodes = { 3l, 2l, 2l };
		for (int i = 0; i < 3; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding4RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0015375691006470767, 0.001115346015543909,
				0.004737082206436243, 0.0014121449439642494 };
		double[] longitudes = { 0.004815494825100149, 0.004471226060597178,
				0.0015227301794810302, 0.00465798678848363 };
		long[] nodes = { 1l, 1l, 4l, 1l };
		for (int i = 0; i < 4; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding5RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.002641073110523184, 0.0012106722218612278,
				0.005403606646494982, 0.002231690141667758,
				0.003379365303742083 };
		double[] longitudes = { 0.0016983756128899083, 0.003157740576434473,
				0.0031965126426270547, 0.0026514137609504867,
				0.0012524888548926146 };
		long[] nodes = { 3l, 2l, 4l, 2l, 4l };
		for (int i = 0; i < 5; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding6RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.002724049209626215, 0.004865563101818707,
				0.002586327903673904, 0.0028908761363245702,
				0.005394985850454161, 0.0021451722395329914 };
		double[] longitudes = { 0.005340762104612507, 0.0026774643737552664,
				0.002282148926128884, 0.00432097064489108,
				0.001435254809170062, 0.002003568056720946 };
		long[] nodes = { 1l, 4l, 3l, 2l, 4l, 3l };
		for (int i = 0; i < 6; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding7RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.002481763174128452, 0.002002892440695286,
				0.001625843281884942, 0.0013783114450714343,
				0.0029890137356231848, 0.004762703487242066,
				0.004354563306149738 };
		double[] longitudes = { 0.0019477854389958968, 0.005688533988946817,
				0.0017212874154383137, 0.004303888582079455,
				0.004014331350795692, 0.004682918006941712,
				0.0029728043427068077 };
		long[] nodes = { 3l, 1l, 2l, 1l, 2l, 3l, 3l };
		for (int i = 0; i < 7; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding8RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.00121786083369354, 0.0012853523415292014,
				0.0028119505764428315, 0.004268971456668333,
				0.00194660592149351, 0.00544531008046534, 0.004462315071751438,
				0.005829095716475744 };
		double[] longitudes = { 0.0026211256462082308, 0.0029150740092209163,
				0.00267086307903864, 0.0034901227549193254,
				0.0019717037452797355, 0.004339547336046085,
				0.002084096710212131, 0.0016658493132620062 };
		long[] nodes = { 2l, 2l, 3l, 3l, 2l, 3l, 4l, 5l };
		for (int i = 0; i < 8; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 1000)
	public void testNodeFinding9RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 0.0010659545635403908, 0.0024275000821591996,
				0.005552338284910339, 0.0027455781621159156,
				0.004161495034124445, 0.00525680096277026,
				0.0010091294594406716, 0.0016298775847824552,
				0.004943408187379304 };
		double[] longitudes = { 0.005053744018989721, 0.001814722627407301,
				0.002074741677311467, 0.0021481175775888103,
				0.0017569262832532891, 0.002927101284961703,
				0.003395328481743006, 0.003462986439607382,
				0.001384138705873326 };
		long[] nodes = { 1l, 3l, 4l, 3l, 4l, 4l, 1l, 2l, 4l };
		for (int i = 0; i < 9; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

}