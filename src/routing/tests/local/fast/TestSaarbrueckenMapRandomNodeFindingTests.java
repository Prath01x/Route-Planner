package routing.tests.local.fast;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import routing.Coordinate;
import routing.Node;
import routing.NodeFinder;
import routing.tests.TestingBase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestSaarbrueckenMapRandomNodeFindingTests extends TestingBase {

	@Before
	public void setUp() {
		getNodeFinder();
	}
	
	@Override
	public String getMapFileName() {
		return "saarbruecken.osm.nae";
	}

	@Test(timeout = 3000)
	public void testNodeFinding10RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.258689310319504, 49.526223475598535,
				49.64626161069291, 49.65208290363856, 49.22915024565677,
				49.328459013837076, 49.404446166029, 49.5220238436704,
				49.49242206878857, 49.39621287451663 };
		double[] longitudes = { 6.7565535817577524, 7.078247368692401,
				7.252067121090267, 6.915265931474213, 7.324524355541179,
				6.811831349865143, 6.724533799360197, 7.358286586611479,
				7.249344909464735, 7.005957556523564 };
		long[] nodes = { 267952855l, 791627145l, 1629272701l, 1521687331l,
				1211141670l, 1029735852l, 1032988532l, 1629272701l,
				1629272665l, 778319991l };
		for (int i = 0; i < 10; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding11RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.27625736935072, 49.502095181565636,
				49.63053403717118, 49.3179929732948, 49.33375114604764,
				49.214831112605275, 49.52796677546372, 49.21834285757289,
				49.59282511169449, 49.28907386319547, 49.62977268154651 };
		double[] longitudes = { 7.00112419713811, 7.19508880193372,
				6.858511729893419, 7.292126147223651, 7.32890908964779,
				6.934747316250803, 7.106391515535871, 6.884810640465477,
				6.69419079754403, 7.014965670175095, 6.772775400634427 };
		long[] nodes = { 3406878012l, 1208977060l, 1521687293l, 747698110l,
				1629272638l, 1270816521l, 791627145l, 387515892l, 1521687100l,
				914949058l, 1521687187l };
		for (int i = 0; i < 11; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding12RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.5037903939401, 49.50164139838346,
				49.31374193971315, 49.61223662782388, 49.22288352059663,
				49.48208203058278, 49.592870962840394, 49.41495252317615,
				49.41481553510297, 49.303749439388966, 49.40312417778139,
				49.6838472345515 };
		double[] longitudes = { 7.185659113316929, 6.819311137206115,
				7.282152875505878, 7.2285450192635885, 6.854743815647749,
				6.98107412839763, 7.178734488925299, 7.2178961878057235,
				6.866214725692495, 6.782710023201175, 6.936989561619643,
				6.997583812087079 };
		long[] nodes = { 1208977060l, 890999457l, 1211141666l, 1629272665l,
				296350557l, 1032988537l, 1629272665l, 1208977060l, 1032988537l,
				1033019782l, 1029735800l, 567121105l };
		for (int i = 0; i < 12; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding13RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.32988783351979, 49.41054773982372,
				49.28373515129065, 49.56015888889063, 49.43935940934192,
				49.46743988153699, 49.44065236441004, 49.49887429099273,
				49.21509566731702, 49.34465627951942, 49.372052614413484,
				49.453516956947574, 49.510206732805464 };
		double[] longitudes = { 6.89355549061503, 7.069057931084041,
				6.883018771102732, 6.992553563215237, 6.818728535653774,
				6.682335002588121, 7.316554486708469, 6.76704278181418,
				6.956814662081321, 7.067611691736973, 6.809738913130868,
				6.940889911857849, 7.015982622390156 };
		long[] nodes = { 1029735825l, 791627145l, 1033019610l, 890999457l,
				1629122041l, 1521686615l, 1629272701l, 2180235476l, 319853684l,
				2836081881l, 1032988575l, 1032988537l, 791627145l };
		for (int i = 0; i < 13; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding14RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.351676179103706, 49.38771388343561,
				49.342490759186866, 49.50467712032009, 49.327899423883764,
				49.602137513991345, 49.2965948387062, 49.28360651046971,
				49.45886613294724, 49.38348972148481, 49.30013063549757,
				49.6204240904029, 49.43504635635991, 49.47780961164474 };
		double[] longitudes = { 7.074118243261145, 7.299514732676669,
				7.312303227760861, 7.001889545610404, 7.031353322938409,
				7.04025273899047, 7.277068457750704, 6.71152545016407,
				7.379836037476438, 7.30026846464119, 6.798513924538784,
				6.829076800599756, 7.076489529988138, 6.989512663097568 };
		long[] nodes = { 2836081881l, 1629272685l, 1629272647l, 2180062674l,
				1531285310l, 1521687117l, 1211141670l, 267952855l, 1629272701l,
				1629272685l, 1033019782l, 1521687153l, 791627145l, 1032988537l };
		for (int i = 0; i < 14; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding15RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.2688949542949, 49.39903673758083,
				49.31920860256984, 49.624025576432686, 49.631889537144524,
				49.43739118701094, 49.34601232550645, 49.480110026413456,
				49.21095586639477, 49.449528362572025, 49.46622665631108,
				49.55848437929919, 49.384004655271944, 49.27882156658121,
				49.52296904399423 };
		double[] longitudes = { 6.742379017023347, 7.128661823586389,
				7.013987328996601, 6.690518676765007, 6.946182866169392,
				6.956834851076581, 7.362140782866091, 6.995999313608589,
				6.7425044491765735, 7.078954980931313, 7.231377281871209,
				6.76328355624089, 6.956039204231331, 6.98265545871925,
				7.086234989681743 };
		long[] nodes = { 267952855l, 1209109947l, 336055259l, 1521687153l,
				1521687331l, 1032988594l, 1629272681l, 791627145l, 267952855l,
				791627145l, 1629272665l, 1521686814l, 486144202l, 3406878017l,
				791627145l };
		for (int i = 0; i < 15; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding16RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.31562703308864, 49.49854235904859,
				49.21099540943354, 49.55517514339074, 49.52328523454187,
				49.650958473307334, 49.27472559983522, 49.3029945092887,
				49.273107800395046, 49.552689755546034, 49.335568819756766,
				49.3298097761495, 49.58827638731685, 49.35689127973005,
				49.67611277866551, 49.47798430940632 };
		double[] longitudes = { 6.766903770264331, 6.877616912439923,
				7.1427723540982875, 7.044971429478255, 6.899000432722829,
				7.0282757686296256, 6.752708237573094, 7.083544113519292,
				7.29912514155106, 6.81565140699829, 7.210832149663461,
				6.794766635144632, 7.254234353594842, 7.097008953967112,
				6.771322947124813, 7.077651685649659 };
		long[] nodes = { 1029735852l, 890999457l, 2280213826l, 1032988550l,
				890999457l, 1521687343l, 267952855l, 685153090l, 1211141670l,
				1521686733l, 1208977159l, 1029735852l, 1629272701l,
				1139620237l, 1521687351l, 791627145l };
		for (int i = 0; i < 16; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding17RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.39006604205431, 49.33259386719645,
				49.457181679042236, 49.56397774802993, 49.45680067369856,
				49.549485443676105, 49.42748361861131, 49.491169212064975,
				49.21224107584511, 49.34878495560834, 49.42575588456382,
				49.48190297697807, 49.28075463779986, 49.67167109576282,
				49.41325350262829, 49.25302090425869, 49.420786817415575 };
		double[] longitudes = { 7.306580742677587, 6.757047479210967,
				7.262131688738407, 6.726783769979439, 7.193223256422868,
				6.825815083922949, 6.944098904033869, 7.210251118554642,
				7.3012447178766795, 7.054887529562179, 7.278106007191189,
				6.7818556719799, 6.818270891560584, 6.8193362131273565,
				6.706583362859757, 7.240939469312246, 7.180063974094862 };
		long[] nodes = { 1629272685l, 1029735852l, 1629272665l, 1521686971l,
				1208977060l, 1521686733l, 2671263612l, 1629272665l,
				1211141670l, 2836081886l, 1629272665l, 890999457l, 1033019645l,
				1521687346l, 1032988532l, 1211141670l, 1208977111l };
		for (int i = 0; i < 17; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding18RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.39041093982662, 49.57006095578186,
				49.5364923854852, 49.34341026143367, 49.67168000385045,
				49.65326786130082, 49.44975077676911, 49.665155039774874,
				49.668871879186064, 49.246191177034476, 49.206265404993864,
				49.54856950486327, 49.56063545330929, 49.645442394805286,
				49.47270607314059, 49.55241259416079, 49.273857562813895,
				49.19624643162108 };
		double[] longitudes = { 7.100101463505116, 7.24213700325858,
				6.844254868730064, 7.069138941965169, 7.268483009793365,
				6.704525970207278, 6.9352976472039725, 7.358621672549274,
				7.283095245460199, 6.893814012149443, 6.761233922527939,
				7.219577796073758, 7.070621840527233, 6.714241544488939,
				7.1109187490253944, 6.933335026660046, 7.342060987230488,
				6.834157586492542 };
		long[] nodes = { 1139620211l, 1629272685l, 1521686733l, 2836081881l,
				1629272701l, 1521687275l, 1032988537l, 1629272701l,
				1629272701l, 296348152l, 267952855l, 1629272665l, 791627145l,
				1521687221l, 1139620211l, 890999457l, 1629272638l, 323607530l };
		for (int i = 0; i < 18; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding19RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.30033377990925, 49.41497756316691,
				49.63730338074855, 49.507107563188995, 49.39258434638834,
				49.40450657643124, 49.3830696558122, 49.368249483604885,
				49.54554138230903, 49.34436676790557, 49.411458689788475,
				49.21045493081129, 49.37894425184484, 49.63204391906826,
				49.20870297011168, 49.34204393144031, 49.581390251954694,
				49.27342566320155, 49.254137254419774 };
		double[] longitudes = { 7.114800773886597, 7.027023781558158,
				7.37846486666749, 6.670108306897378, 6.718783278947554,
				6.816395426014423, 6.822854840223001, 6.733562493587586,
				7.069009663845636, 6.9946253234050735, 6.960117793504652,
				6.933367262707581, 6.919858195497491, 6.702408368677461,
				6.86331320947388, 7.218501983773907, 6.720006114151105,
				6.897292025424739, 7.337789547396948 };
		long[] nodes = { 665891195l, 791627145l, 1629272701l, 2180235487l,
				1032988532l, 1032988541l, 1032988529l, 1397357692l, 791627145l,
				307481334l, 778319991l, 278568051l, 1029735838l, 1521687187l,
				323607530l, 1208977111l, 1521687096l, 1033019771l, 1629272638l };
		for (int i = 0; i < 19; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding20RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.61376665722603, 49.270242669113195,
				49.43771531339277, 49.657957433071964, 49.31762676523786,
				49.65752364635412, 49.68061114491751, 49.45994110728678,
				49.56601650039877, 49.47435804162962, 49.38238123482174,
				49.265222542373266, 49.45571593589591, 49.1945116295392,
				49.534996468409396, 49.60512114757149, 49.68927557258988,
				49.52009804578305, 49.23045699463837, 49.546995224230145 };
		double[] longitudes = { 6.947322285776409, 6.709564180373085,
				7.164077189257676, 6.682453482954581, 7.276040796767378,
				7.244367940389035, 7.079376382986106, 7.063023592623471,
				7.310511169101681, 6.852853100630135, 7.349913083808682,
				6.738748708389632, 7.163513813771262, 6.6711733252013286,
				6.7691800995316, 7.312192851529414, 7.184498430635819,
				7.344353049855396, 6.826501861733932, 7.055517345306476 };
		long[] nodes = { 1521687146l, 267952855l, 1208977159l, 1521687275l,
				1211141670l, 1629272701l, 567121105l, 791627145l, 1629272701l,
				890999457l, 1629272699l, 267952855l, 1208977111l, 267952855l,
				1521686733l, 1629272701l, 567121105l, 1629272701l, 267952855l,
				791627145l };
		for (int i = 0; i < 20; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding21RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.235251306637295, 49.625499589550806,
				49.58686178597268, 49.53450912129839, 49.63137028209701,
				49.542165802897394, 49.270426213194334, 49.22790713633398,
				49.60516568446098, 49.436399756980656, 49.40660506382336,
				49.57365779487334, 49.48205696306334, 49.56624016032201,
				49.293222613293565, 49.23323240195288, 49.63431525678386,
				49.35768037767695, 49.455242162284485, 49.626576644390624,
				49.30909684751909 };
		double[] longitudes = { 6.838216013372448, 6.91444428102805,
				7.258333134148344, 6.850644856141347, 7.18644814768264,
				7.032155440612301, 6.874397355350319, 7.24208342651466,
				7.3364373162780625, 6.695202363520802, 7.018187281943731,
				6.8233377723915005, 7.227306690517566, 6.924640742986774,
				7.16410143882192, 6.737153511364327, 6.890699414815709,
				7.271608760954308, 7.122406617958286, 7.058735262135849,
				7.159722098787733 };
		long[] nodes = { 267952855l, 1521687331l, 1629272701l, 1521686733l,
				1629272665l, 988790904l, 267952840l, 268779787l, 1629272701l,
				1032988582l, 791627145l, 1521686814l, 1629272665l, 1521686733l,
				1208977141l, 267952855l, 1521687331l, 1211141566l, 1139620211l,
				1521687331l, 1208977141l };
		for (int i = 0; i < 21; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding22RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.21530397913087, 49.53603668679052,
				49.51266399713795, 49.27514788306308, 49.537649481383546,
				49.600202025373534, 49.503606674805255, 49.56794673185565,
				49.58770773531948, 49.64715196382995, 49.32283537369643,
				49.288755817274705, 49.5358090432386, 49.30816162759984,
				49.43996028332271, 49.52809790314007, 49.373143829330964,
				49.61704064467607, 49.45894024861981, 49.28208321906872,
				49.665023975138716, 49.555540396746984 };
		double[] longitudes = { 6.9241584991141245, 7.279647975614343,
				7.198733654184259, 7.117257499815073, 7.133408095674758,
				7.155173428217992, 7.28796647385272, 7.0708419262455795,
				6.675844946788535, 7.238597742211645, 6.68180219966429,
				6.979639797858715, 6.992845862729149, 6.9696368427903685,
				7.222377448881461, 7.16677670062036, 6.796099899515662,
				7.232842119149048, 6.855320477825905, 6.949418408984048,
				7.097514320099614, 7.185033356389322 };
		long[] nodes = { 616099633l, 1629272701l, 1629272665l, 2962389222l,
				1139620157l, 1208977060l, 1629272701l, 791627145l, 1521687061l,
				1629272701l, 1029735852l, 1276251494l, 2180298522l,
				1531282253l, 1629272665l, 1208977060l, 1484902049l,
				1629272685l, 988790904l, 1271818318l, 567121105l, 1629272665l };
		for (int i = 0; i < 22; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding23RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.65341374676034, 49.458584996845225,
				49.63410089479617, 49.46709993600534, 49.56553193320052,
				49.198107851532036, 49.28794294105389, 49.565058497101205,
				49.300277402354375, 49.37873727543199, 49.27595476676319,
				49.43720573744947, 49.60865248536837, 49.448723517757976,
				49.328339705789794, 49.35957952654266, 49.30221625776281,
				49.2311128758452, 49.61523726283339, 49.55800766948795,
				49.33343279165988, 49.55181330511472, 49.225665118684816 };
		double[] longitudes = { 7.182315723081009, 6.84162741614509,
				7.077643871146412, 6.7949305006849094, 6.722770135916017,
				7.297030996997422, 6.831591853701628, 7.261193941253854,
				6.984532788897052, 7.089706269815824, 6.869392803654626,
				7.0388012822699, 7.041524778393303, 7.1284106959267115,
				6.730306762220969, 7.163316309502936, 6.764939443799646,
				6.858670954066616, 7.084678659379899, 6.96319639038443,
				6.7310979869321566, 7.339250785064425, 6.831283221844235 };
		long[] nodes = { 1629272665l, 1032988550l, 1521687331l, 890999457l,
				1521686976l, 642267465l, 1033019645l, 1629272701l, 1276251463l,
				1139620211l, 1033019610l, 791627145l, 1521687331l, 1139620157l,
				1029735852l, 1139620266l, 1029735852l, 296350557l, 1521687331l,
				890999457l, 1029735852l, 1629272701l, 267952855l };
		for (int i = 0; i < 23; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding24RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.63323314182127, 49.26403375337971,
				49.56456307571979, 49.64328143159203, 49.542767171280616,
				49.68258322561249, 49.35499614054167, 49.36104552875695,
				49.281058917938424, 49.22918930446571, 49.47895225316602,
				49.2139734767016, 49.46258609230247, 49.3971643064,
				49.66929106178805, 49.653918107896104, 49.466325694466306,
				49.56329180200302, 49.652260524403445, 49.59232771792269,
				49.43231906988219, 49.467781132631266, 49.60840389594166,
				49.58191525483467 };
		double[] longitudes = { 6.843052740456527, 6.7608187297763855,
				6.914785983683937, 6.715668965762426, 7.334357582220749,
				7.012607757141875, 6.850339339015926, 6.723956844538635,
				7.263800999038361, 6.867530392563858, 6.940331076194652,
				7.285797895884893, 7.186269528878698, 6.739346754972867,
				6.828676471662727, 7.237257046364282, 7.339234906447357,
				6.879376425067314, 7.189828453154019, 6.729805575995338,
				7.050380439319337, 6.876335772772701, 7.175684758254613,
				6.848690409589671 };
		long[] nodes = { 1521687287l, 267952855l, 1521686733l, 1521687215l,
				1629272701l, 567121105l, 2180298519l, 1397357687l, 1211141670l,
				296350557l, 1032988541l, 1211141670l, 1208977060l, 2180298521l,
				1521687346l, 1629272701l, 1629272701l, 1521686733l,
				1629272665l, 1521687106l, 791627145l, 988790904l, 1629272665l,
				1521687111l };
		for (int i = 0; i < 24; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding25RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.545079849862574, 49.623073633941786,
				49.27603383758913, 49.62295880353806, 49.40417456347195,
				49.66777316600453, 49.690593204659834, 49.62872992615712,
				49.2958529231161, 49.64730715571456, 49.39723160486626,
				49.60260612532038, 49.57832169489752, 49.47145216220859,
				49.44977707815283, 49.467893462526895, 49.36656161448004,
				49.39017280948712, 49.499679105270694, 49.539666957107904,
				49.35188058480387, 49.39365126681043, 49.637864589086085,
				49.280711893168395, 49.67893111884479 };
		double[] longitudes = { 6.867801060319022, 6.818008670207639,
				7.366530455003868, 6.73394358884702, 7.178891908934787,
				6.762883445978271, 6.79823328867083, 6.812469929686667,
				6.813363367801339, 6.81859166308926, 7.13543073990531,
				6.999159022120884, 6.857212793921007, 6.761319328872624,
				6.836935389989972, 6.841928587221538, 6.973204307511805,
				6.873696741109339, 6.779020894754769, 7.103857254563274,
				6.777113702032918, 7.341732134645758, 6.930089423237456,
				6.810266762345815, 6.687609180913391 };
		long[] nodes = { 1521686733l, 1521687153l, 1629272638l, 1521687153l,
				1208977159l, 1521687335l, 567121105l, 1521687187l, 1033019720l,
				1521687331l, 1209109922l, 1521687115l, 1521687111l,
				1032988588l, 988790904l, 890999457l, 421838095l, 1029735863l,
				1521686727l, 791627145l, 1029735886l, 1629272700l, 1521687331l,
				1033019645l, 1521687343l };
		for (int i = 0; i < 25; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding26RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.28766372686023, 49.23633613292467,
				49.23611134428604, 49.65105996405483, 49.469262146734145,
				49.28761500119367, 49.49493792651005, 49.41926971385418,
				49.34064498746265, 49.38947943503248, 49.35704764408973,
				49.278662760300456, 49.19372686085973, 49.204751682112544,
				49.545053365886595, 49.6328665081199, 49.40152941829139,
				49.68128427839683, 49.33376692037566, 49.35786102387232,
				49.26780399769819, 49.21586900850441, 49.56177317018976,
				49.20788616127829, 49.24816010133588, 49.66982680594852 };
		double[] longitudes = { 6.993084960894669, 6.82855354593171,
				6.9977683795332934, 7.225998327343627, 7.171985020776689,
				6.8889021536825865, 6.734424404502634, 6.695953082934067,
				6.741906429300012, 7.110410346099838, 7.0410726514008495,
				7.079656379651054, 6.958834144074479, 7.048916050692014,
				7.097355333621502, 7.231469804754397, 6.9207224567830075,
				7.323401204072796, 6.81945583568407, 7.270357598802728,
				7.181635918802577, 7.038675508045397, 7.169894606318179,
				7.149035528324775, 6.999366536447685, 7.104381144948741 };
		long[] nodes = { 3406878017l, 267952855l, 1377592127l, 1629272701l,
				1208977060l, 1033019610l, 2180235476l, 1032988532l,
				1029735852l, 1139620211l, 791627145l, 2963136675l, 938405251l,
				605225650l, 791627145l, 1629272701l, 1029735800l, 1629272701l,
				1029735852l, 1211141598l, 273186954l, 1028109289l, 1208977060l,
				642267465l, 1981026722l, 567121105l };
		for (int i = 0; i < 26; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding27RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.57312226641889, 49.316978191091835,
				49.39494647949973, 49.34806603716959, 49.657773736192574,
				49.281870185319946, 49.46509422374829, 49.31102257164113,
				49.242846438741246, 49.24884757445813, 49.64703184589571,
				49.633693462781395, 49.580023446833835, 49.405683573239564,
				49.389799490354314, 49.63157970310222, 49.292250893315185,
				49.53988336496482, 49.67567256829499, 49.460167368334545,
				49.62600758217763, 49.226390707702606, 49.35890983023248,
				49.45963561921467, 49.37158586607623, 49.27177160746514,
				49.660254983496046 };
		double[] longitudes = { 6.897557419831968, 7.315704345124102,
				6.910912568302701, 6.770067748947051, 7.244072743921882,
				7.100848160627688, 6.888035951042433, 6.803672226487758,
				6.84459820932114, 7.14307611466098, 7.106596099531433,
				7.042044242693195, 7.239472070088533, 7.160959571261938,
				7.039282021447695, 6.6904498982846, 6.725974064762376,
				7.099701037008535, 7.238513436424634, 7.131947100281339,
				6.787523181882478, 6.881871720302431, 6.922363408587773,
				7.299520484379111, 7.372284001660262, 7.358362621423142,
				6.9658099803584275 };
		long[] nodes = { 1521686733l, 1629272647l, 1029735800l, 1029735852l,
				1629272701l, 2962394747l, 706509414l, 1033019782l, 267952855l,
				268779787l, 1521687346l, 1521687331l, 1629272685l, 1209109971l,
				791627145l, 1521687187l, 1029735852l, 791627145l, 1629272701l,
				1139620157l, 1521687157l, 296350557l, 1029735838l, 1629272685l,
				1629272701l, 1629272638l, 1521687351l };
		for (int i = 0; i < 27; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding28RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.569539253097766, 49.52127234124563,
				49.44893933171853, 49.594159963985334, 49.588040251459645,
				49.37640360019768, 49.37881470179354, 49.326489058627324,
				49.60912407400686, 49.52712303295531, 49.50576299322366,
				49.283242074447166, 49.40622750431266, 49.4744226261684,
				49.31015708975893, 49.648386861674986, 49.63228499284898,
				49.49393048151584, 49.6071936466309, 49.23414680664582,
				49.28696077680289, 49.37710769303975, 49.495756613384884,
				49.435794095768564, 49.31393594270643, 49.21265063962762,
				49.388502304687464, 49.66885738150344 };
		double[] longitudes = { 6.711293141097721, 6.9904847199787365,
				6.820444179576623, 7.0195401939753825, 6.673582127852327,
				6.693752859656301, 6.894899417398186, 6.76963523979601,
				6.888559534778418, 6.785620045956752, 7.226467936576035,
				7.117843434944895, 7.062724507865044, 6.733451005502405,
				7.154823968386418, 7.040357118928922, 6.813598798779104,
				6.907285558492544, 7.354364318033252, 7.246560577994276,
				7.093648914436192, 7.03860157630252, 6.6918300197531675,
				6.6970425269464, 6.90248734432999, 6.673033556643817,
				6.961892164210219, 7.297731447978535 };
		long[] nodes = { 1521686981l, 1629122041l, 1032988550l, 1521687111l,
				1521687061l, 1032988532l, 1029735838l, 1029735852l,
				1521687117l, 1521686733l, 1629272665l, 2962394756l, 791627145l,
				1032988530l, 1208977141l, 1521687338l, 1521687204l,
				2180298522l, 1629272701l, 268779787l, 2962394747l, 791627145l,
				1521686670l, 1032988582l, 1033019675l, 267952855l, 486144202l,
				1629272701l };
		for (int i = 0; i < 28; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding29RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.40696925412724, 49.35297554264698,
				49.498309115418934, 49.58892005727612, 49.29109366219395,
				49.318579907065214, 49.62895409646262, 49.57417424731123,
				49.27616223791547, 49.58877115824887, 49.338229891604534,
				49.420898845845, 49.28267903059587, 49.428826069436155,
				49.33486822422662, 49.66925367398783, 49.28658913527441,
				49.422515548744464, 49.4169653472538, 49.29070124514545,
				49.208243239984235, 49.63124605869771, 49.322024447481496,
				49.52845913233886, 49.24053222841937, 49.2162863436463,
				49.29341437677519, 49.38236925417748, 49.42285734536771 };
		double[] longitudes = { 6.6699385078076725, 7.02378324537077,
				6.704353329076764, 7.282127363139445, 7.0881399919670445,
				7.158854270433419, 7.173955238002182, 7.070456576485178,
				6.996573645682055, 7.350788472662941, 6.782410052616339,
				6.689267367436095, 7.34238490337407, 6.935388320515888,
				7.103884510787219, 6.721437597313178, 6.905089287430406,
				7.23617661487751, 7.228561624929361, 6.727372801023922,
				6.824407356699286, 7.037316295757401, 7.359607052645101,
				7.169151723529213, 7.272621724227987, 7.021825146724484,
				6.825341282163764, 6.9439538089119655, 7.325405620382293 };
		long[] nodes = { 1032988532l, 778319991l, 1521686670l, 1629272701l,
				2963136675l, 1208977141l, 1629272665l, 791627145l, 3406878014l,
				1629272701l, 1029735852l, 1032988532l, 1629272638l,
				1032988571l, 684080365l, 1521687331l, 1209697326l, 1629272665l,
				1208977060l, 1029735852l, 323607530l, 1521687331l, 1629272638l,
				1208977060l, 1211141670l, 919165891l, 1033019805l, 1646175525l,
				1629272701l };
		for (int i = 0; i < 29; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding2RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.57399134730727, 49.237383680555524 };
		double[] longitudes = { 6.756103550425355, 6.934093816800501 };
		long[] nodes = { 1521687028l, 604246285l };
		for (int i = 0; i < 2; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding30RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.33595991253393, 49.485138227974645,
				49.23317817131716, 49.33041021691655, 49.515922499756485,
				49.45383587131743, 49.35055685435137, 49.63333051360898,
				49.28694245856806, 49.649991849277455, 49.2121332562255,
				49.27663165728964, 49.321223255562565, 49.67407256712854,
				49.41319298685807, 49.28938878874553, 49.580132322704635,
				49.68458254748876, 49.318498248470384, 49.392023077155145,
				49.512020953960615, 49.5226029344954, 49.658667623828244,
				49.55847336373414, 49.591380639759244, 49.454248269057054,
				49.42987439325235, 49.504330332755515, 49.29165530867039,
				49.47785782976644 };
		double[] longitudes = { 7.039266309636482, 6.704920512534009,
				6.84464768263518, 7.172079812963253, 7.304013105948199,
				6.729871380618494, 7.13831132683117, 6.9345278344408685,
				7.141903832311224, 7.130719127159089, 6.6714245801864775,
				6.739122516172344, 6.906303653438688, 7.338385939556815,
				7.103802433334229, 7.329975184971667, 7.246650789029851,
				7.325618684058095, 6.669844859024593, 7.108883402291469,
				6.918910204184964, 7.003819161722106, 6.916909967930718,
				6.868568935903536, 7.283391896321559, 6.914439755173252,
				6.753742454201923, 7.130027797925921, 6.967645886039573,
				7.318609181652352 };
		long[] nodes = { 335759232l, 1521686664l, 267952855l, 1208977069l,
				1629272701l, 1032988536l, 1209109971l, 1521687331l,
				2962389222l, 1521687351l, 267952855l, 267952855l, 2180068865l,
				1629272701l, 1139620211l, 1629272638l, 1629272685l,
				1629272701l, 1029735852l, 1139620211l, 890999457l, 1397357687l,
				1521687338l, 1521686733l, 1629272701l, 2180062674l,
				1032988564l, 1139620157l, 1276251521l, 1629272701l };
		for (int i = 0; i < 30; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding31RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.400255410850185, 49.426823214587635,
				49.31078459147494, 49.51233702190818, 49.31129265566087,
				49.512370487316616, 49.574134864918165, 49.56118386647728,
				49.36422599959795, 49.47081989369748, 49.26043100335386,
				49.679503934689194, 49.25930461378373, 49.585725930647435,
				49.47062103013397, 49.4912454512043, 49.42330265368135,
				49.52993344259043, 49.6618366859173, 49.4453022752896,
				49.2930108073291, 49.512971028226744, 49.44803529084173,
				49.35379523436385, 49.590720652637955, 49.68319383348955,
				49.596556622870125, 49.564375146346336, 49.257557934430764,
				49.56571369411184, 49.243440007093035 };
		double[] longitudes = { 7.117201661732588, 6.958644221408378,
				7.2459979239073125, 7.301289656080683, 7.089761691369236,
				6.683957031423878, 7.137591873942669, 7.322075486102933,
				7.008618481129979, 7.174004457894695, 6.99126009201186,
				7.215764577228781, 6.692214717300174, 7.1253130637934365,
				7.332139171648773, 7.335554056693158, 6.794908470253095,
				7.102350090818545, 6.893304102540882, 6.697514884029575,
				7.2389995589655145, 7.162939504685093, 7.32881088118548,
				7.138860832485727, 7.189727994206572, 7.035405617766373,
				6.96004275263985, 6.749228360125925, 7.041049330991474,
				6.94847839663453, 7.056489945661288 };
		long[] nodes = { 1139620211l, 1032988529l, 1211141670l, 1629272701l,
				1164711487l, 1521686721l, 1139620157l, 1629272701l, 778319991l,
				1208977060l, 280569872l, 1629272701l, 267952855l, 791627145l,
				1629272701l, 1629272701l, 988790875l, 791627145l, 1521687343l,
				1032988588l, 1211141670l, 1208977060l, 1629272701l,
				1209109971l, 1629272665l, 567121105l, 1521687111l, 1521686814l,
				417401240l, 1521686733l, 1030595871l };
		for (int i = 0; i < 31; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding32RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.40972227573018, 49.19870688786447,
				49.463848626160726, 49.395235190216724, 49.510540610548695,
				49.27941789168698, 49.54263908066978, 49.30355662049996,
				49.39218655023936, 49.54403073350562, 49.42648566677076,
				49.55012765687369, 49.2838198255075, 49.59689901511734,
				49.66828961537403, 49.58259606522245, 49.628105978639354,
				49.2943996017193, 49.3282470139806, 49.36791962228144,
				49.22477262104921, 49.66566279208867, 49.604612531206044,
				49.203604856724766, 49.25768920571278, 49.599040466951344,
				49.34657282852934, 49.432488230747495, 49.394501350247594,
				49.213172521491074, 49.593092769166276, 49.23400255362043 };
		double[] longitudes = { 7.27614290641637, 7.36229562388127,
				6.984728947229556, 7.357254944907711, 7.270290433168114,
				7.304594999535268, 7.104643178492859, 7.375488297148382,
				7.215136112324803, 6.93500060341856, 7.181508311953596,
				6.8953153131992995, 7.044704345603911, 6.700289428771959,
				6.8955610471325794, 7.356421342067169, 6.794312955964611,
				6.775343163519051, 6.9094093331150725, 7.225724173876446,
				6.820150750489442, 6.933701986557262, 7.374622279327639,
				6.873376972787823, 6.9908190872145965, 7.061734639201396,
				6.723031018617305, 7.070077252134525, 7.151998765030305,
				7.012676554536459, 6.7879083773626485, 7.325811953877451 };
		long[] nodes = { 1629272665l, 1629272638l, 778319991l, 1629272701l,
				1629272685l, 1211141670l, 791627145l, 1629272638l, 1208977060l,
				890999457l, 1208977111l, 1521686733l, 343388706l, 1521687103l,
				1521687351l, 1629272701l, 1521687160l, 1033019782l,
				1029735802l, 1208977060l, 267952855l, 1521687351l, 1629272701l,
				323607530l, 610899996l, 1521687115l, 1029735852l, 791627145l,
				1209109971l, 1137426669l, 1521687111l, 1211141670l };
		for (int i = 0; i < 32; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding3RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.481788885737274, 49.497759566458775,
				49.46427539519014 };
		double[] longitudes = { 6.80753449637243, 6.9068835653998315,
				6.954858280074261 };
		long[] nodes = { 890999457l, 890999457l, 1032988537l };
		for (int i = 0; i < 3; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding4RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.58833066814707, 49.63919643859514,
				49.45993983229802, 49.61839085715997 };
		double[] longitudes = { 7.309187249287259, 7.173433123750052,
				6.709900700018486, 6.8309002152466025 };
		long[] nodes = { 1629272701l, 1629272665l, 2180235481l, 1521687146l };
		for (int i = 0; i < 4; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding5RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.19402475591977, 49.65748066856864,
				49.32046374234088, 49.346789915236734, 49.48303147741561 };
		double[] longitudes = { 7.346966598755296, 6.85200358397547,
				6.733272601377883, 6.847856315009448, 6.911066877695563 };
		long[] nodes = { 1211141670l, 1521687331l, 1029735852l, 1029735857l,
				1629122041l };
		for (int i = 0; i < 5; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding6RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.61214940807336, 49.25936270075243,
				49.40288663557176, 49.50362125245351, 49.30386177236761,
				49.291046762874885 };
		double[] longitudes = { 7.095916811655948, 7.0872108272721785,
				6.819747440474026, 6.81251670759794, 7.127924372126993,
				6.878599383412546 };
		long[] nodes = { 1521687331l, 2190953465l, 1397357682l, 890999457l,
				1209109973l, 2180037208l };
		for (int i = 0; i < 6; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding7RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.340843904909406, 49.275045219374086,
				49.46033831051345, 49.4589166081435, 49.26996074271934,
				49.45649785747104, 49.67975021820367 };
		double[] longitudes = { 7.021351722230619, 7.091937503618609,
				7.255534553876885, 7.050431341402329, 7.100961724766908,
				7.153840432966288, 7.1227448254996055 };
		long[] nodes = { 335759194l, 2962394747l, 1629272665l, 791627145l,
				2962394735l, 1209109971l, 567121105l };
		for (int i = 0; i < 7; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding8RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.52027888922574, 49.62429171855754,
				49.38098827903569, 49.196525675877666, 49.402652654056205,
				49.65195194635794, 49.19878298198088, 49.23911162974076 };
		double[] longitudes = { 7.166004966429649, 6.752511942017732,
				6.952007794484509, 7.064643038144398, 7.265550483365892,
				6.695495539625193, 6.999217146426974, 6.946493953352354 };
		long[] nodes = { 1208977060l, 1521687153l, 1646175525l, 148223276l,
				1629272665l, 1521687263l, 3453401297l, 3453512011l };
		for (int i = 0; i < 8; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 3000)
	public void testNodeFinding9RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.60662231902176, 49.544976095221024,
				49.61863080876048, 49.236609352953934, 49.49488357773511,
				49.463226761805, 49.246321349423134, 49.6726950166358,
				49.62891039706266 };
		double[] longitudes = { 6.871760404673579, 7.127197822983908,
				6.75307684548221, 7.142828515355677, 7.068171945110995,
				7.350997395380261, 7.374464147601744, 7.1149458266177845,
				7.028137213928904 };
		long[] nodes = { 1521687117l, 1139620211l, 1521687146l, 268779787l,
				791627145l, 1629272701l, 1629272638l, 567121105l, 1521687331l };
		for (int i = 0; i < 9; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

}