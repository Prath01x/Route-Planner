package routing.tests.local.huge;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import routing.Coordinate;
import routing.Node;
import routing.NodeFinder;
import routing.tests.TestingBase;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestSaarlandMapRandomNodeFindingTests extends TestingBase {

	@Before
	public void setUp() {
		getNodeFinder();
	}
	
	@Override
	public String getMapFileName() {
		return "saarland.osm.nae";
	}

	@Test(timeout = 50000)
	public void testNodeFinding10RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.249645363819354, 49.37789030304948,
				49.168842857199394, 49.144526292482844, 49.7693222515732,
				49.86501860082807, 49.09310661748853, 49.25268368004484,
				49.85141614377684, 49.40018301113802 };
		double[] longitudes = { 7.35891740948811, 6.423641776510968,
				6.288559131631057, 7.47086916812238, 7.1692073115496,
				7.290543944777344, 6.882165857524933, 6.701049320980575,
				7.398809081506061, 6.6997128132476 };
		long[] nodes = { 1277424517l, 21520288l, 951513495l, 378066695l,
				2970517038l, 2970517042l, 2556679706l, 3279915227l,
				1184389572l, 1592809587l };
		for (int i = 0; i < 10; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding11RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.6587307839346, 49.203640310569384,
				49.11988331325571, 49.65816413873363, 49.3243054293265,
				49.85636399863516, 49.34706579012504, 49.57642230077299,
				49.06950886359387, 49.47628463754878, 49.59793597810219 };
		double[] longitudes = { 6.688990944037255, 7.485975040856891,
				6.661559548317401, 7.162889855598809, 6.76584805423738,
				6.753626173888978, 6.988332606140526, 6.654832825464911,
				6.850263057551192, 6.868642522952687, 7.662007916359772 };
		long[] nodes = { 1521687278l, 518868047l, 1427485288l, 2970549639l,
				1320340608l, 2970517033l, 1547252458l, 2163062599l, 365766841l,
				2311431031l, 738897320l };
		for (int i = 0; i < 11; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding12RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.48780247953877, 49.72800172249247,
				49.08516490759004, 49.8506196784407, 49.159870811155805,
				49.502766626911054, 49.859393595179185, 49.75582583737769,
				49.46035283981538, 49.49730856331227, 49.40165883089091,
				49.320460009503215 };
		double[] longitudes = { 7.294744075160142, 7.303018145176538,
				7.343667472929946, 7.686701119196938, 6.6014241002901635,
				7.536064177519871, 6.578668512449421, 6.844799576778288,
				7.665724083600416, 6.719329375993614, 6.958097147214075,
				6.444506136249475 };
		long[] nodes = { 399376643l, 249483413l, 561152975l, 1184389576l,
				514530354l, 1649541368l, 1648029866l, 2971694437l, 1649541445l,
				416569164l, 1762149955l, 382921572l };
		for (int i = 0; i < 12; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding13RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.38366657094236, 49.87028304819038,
				49.45599951568674, 49.53077587536293, 49.457012788096435,
				49.46563802436565, 49.63677141890249, 49.70254025321954,
				49.54067778331132, 49.649694756145536, 49.661380739062544,
				49.13315274907154, 49.1031479080198 };
		double[] longitudes = { 6.859478133170556, 6.293877783776234,
				6.47599703307289, 7.516091923997035, 6.994055742309907,
				7.313298842774786, 6.423630990304874, 6.514391376509349,
				7.574835105706553, 7.621014601992996, 6.592473917782426,
				6.727428190588653, 7.667329205062136 };
		long[] nodes = { 343644203l, 1648029866l, 1355620380l, 1194651000l,
				2872117429l, 399405793l, 25684918l, 1613208025l, 1649541402l,
				738897310l, 1648029802l, 365766726l, 1274296967l };
		for (int i = 0; i < 13; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding14RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.722582237376116, 49.23178484834381,
				49.07484548026768, 49.48802810881724, 49.730388578907466,
				49.82013636786444, 49.600714929336064, 49.120573861411245,
				49.23741727880229, 49.128573877511265, 49.15881815692255,
				49.44387442433408, 49.316244219264654, 49.46848935843917 };
		double[] longitudes = { 6.7267526135084434, 7.034616296068232,
				7.286959733092005, 6.930176531527783, 7.6536733292063195,
				6.907882397865877, 6.440005594342944, 6.341382813664397,
				6.974478717397172, 7.236427089136742, 7.6006321727267245,
				6.3146228659877055, 7.201059977552396, 6.562681869660607 };
		long[] nodes = { 567121105l, 1734972089l, 562641715l, 1699579929l,
				1184389576l, 2970517033l, 88843964l, 951679018l, 1140684773l,
				561174928l, 1274296967l, 1973832736l, 292567489l, 315595444l };
		for (int i = 0; i < 14; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding15RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.471223776785656, 49.731782975462096,
				49.64385309078604, 49.710255050088904, 49.73198895486566,
				49.48222754822642, 49.84342082869603, 49.09783262415364,
				49.786671982205135, 49.34747712851918, 49.54042420852927,
				49.15110356684193, 49.328206257963714, 49.22281701219392,
				49.443276467098165 };
		double[] longitudes = { 6.912966769319821, 7.5652147894719,
				6.509884823051359, 6.677161592842943, 7.081713394386972,
				6.6169157226993365, 7.469905807521705, 7.622445351128301,
				6.60121469098274, 7.6965911424705284, 7.51047874184309,
				7.171075276880927, 7.234249778597866, 6.673647165263948,
				6.333183221285066 };
		long[] nodes = { 2818677195l, 1184389576l, 1648029721l, 567121105l,
				2970517035l, 2442714311l, 1184389575l, 378066695l, 1648029866l,
				1665329652l, 1194651000l, 368211088l, 2512969826l, 1410995220l,
				1642884523l };
		for (int i = 0; i < 15; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding16RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.274750431834555, 49.75345966113582,
				49.85369949709316, 49.285703741823575, 49.679389543290306,
				49.16232175926581, 49.712930477447976, 49.54280547846901,
				49.75345899148381, 49.183881399709286, 49.317663086815934,
				49.39143281688769, 49.365174277217385, 49.53222110934752,
				49.337692520362175, 49.763216058718925 };
		double[] longitudes = { 7.16621310701577, 6.767145771288087,
				6.935371876272059, 6.720475883794432, 6.417107479793437,
				7.115160408735566, 7.658282054948791, 6.788382419421511,
				6.846766317392262, 7.1926806703659105, 6.853691538231884,
				7.127528716025184, 7.3028144661964465, 6.663780166541136,
				6.782303655641174, 6.995956631850471 };
		long[] nodes = { 588152062l, 2971694437l, 2970517033l, 968115262l,
				1648029750l, 1125272130l, 1184389576l, 2115665507l,
				2971694437l, 341158319l, 410348418l, 303139133l, 836996662l,
				439819623l, 3393052969l, 2970517034l };
		for (int i = 0; i < 16; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding17RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.56931738254603, 49.662342691136956,
				49.46913669050591, 49.11957635554608, 49.322470132342346,
				49.85739416703244, 49.14709335714402, 49.76934662122629,
				49.13996136361805, 49.754925967595106, 49.095056601014875,
				49.46104995345876, 49.39636210953325, 49.56124195602257,
				49.48854461648117, 49.3861665533675, 49.46971006328131 };
		double[] longitudes = { 7.459289096397534, 7.524458735850008,
				6.78398047261242, 6.804590643470845, 7.374621694140261,
				7.174931520823953, 6.879460875627812, 7.558009104444497,
				6.309125437621128, 6.881834613192629, 7.149708972197681,
				6.5771244242211955, 7.337645526703161, 7.264519874506641,
				6.963322702595683, 6.888182287088528, 7.451778209697951 };
		long[] nodes = { 1194651032l, 1194650943l, 812025752l, 1546038343l,
				2822034787l, 2970517039l, 895400909l, 1184389576l, 951679018l,
				2970517033l, 523946195l, 518864518l, 314744957l, 2520965202l,
				461836853l, 439202004l, 738897005l };
		for (int i = 0; i < 17; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding18RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.09420516574592, 49.60185572860292,
				49.494290184831264, 49.22875342620898, 49.38860115302372,
				49.46086461591978, 49.858257855788004, 49.60170748507395,
				49.183545791734645, 49.58883630161917, 49.653466988561966,
				49.87450857359603, 49.18714943229838, 49.467906884407085,
				49.35161925900261, 49.31535990209261, 49.438419595290135,
				49.11269854040565 };
		double[] longitudes = { 7.6257440633252696, 7.637270755497129,
				6.541974394328457, 7.563625484954838, 6.714647552185556,
				7.163555120162104, 7.587749493614862, 6.987482213774327,
				7.179053084293863, 6.8543289903559605, 7.266620576528477,
				6.668061736929573, 6.973790202354894, 7.47606905191156,
				7.1524490737320034, 7.178615830893051, 7.148023410228496,
				7.045231919004533 };
		long[] nodes = { 378066695l, 738897311l, 371734015l, 1274296973l,
				1381657894l, 983580727l, 1184389576l, 3450312987l, 359138586l,
				345685673l, 2071679823l, 2970517033l, 1019838436l, 1649541325l,
				587741558l, 1252962425l, 1484610381l, 681670980l };
		for (int i = 0; i < 18; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding19RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.28957425583591, 49.20782348064799,
				49.320915923701165, 49.63974274043562, 49.86188474263249,
				49.08841666472244, 49.599769561475235, 49.3064151023463,
				49.107101732979245, 49.29156530031154, 49.2258431562612,
				49.4141573211803, 49.088486233576, 49.44841055143461,
				49.393013420454594, 49.18231154670067, 49.16183939168143,
				49.54984716012653, 49.2516373363555 };
		double[] longitudes = { 6.598340544149163, 6.67535549980148,
				6.550209939274518, 7.550738313940052, 6.9585363843688555,
				7.387378832187381, 6.561990176094631, 7.712451513181126,
				6.802112315241317, 7.357765767329559, 6.431658935312482,
				7.6614010222348785, 7.00300805291782, 6.72012743959465,
				6.747017393554608, 7.2789908599021995, 7.6704623845216,
				6.973013174472946, 7.3337585710679765 };
		long[] nodes = { 2459218556l, 1541499563l, 382921558l, 1194650943l,
				2970517036l, 561155695l, 1054487877l, 1274297059l, 365766867l,
				1154703498l, 954413686l, 1665329649l, 2550962092l, 370166160l,
				918904742l, 1162205870l, 1274296967l, 1046264999l, 291763525l };
		for (int i = 0; i < 19; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding20RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.74795457383996, 49.39462043820507,
				49.34627248428497, 49.687010301535004, 49.67779901528807,
				49.482657742119116, 49.84153910613564, 49.72109661690662,
				49.81996004297052, 49.385795225367566, 49.154959073144674,
				49.09499963824818, 49.663409380548195, 49.14322964544208,
				49.40576935292586, 49.333064319884045, 49.754198892843846,
				49.15620385760375, 49.67580663395924, 49.549885641615546 };
		double[] longitudes = { 7.677912796325497, 7.721005270633532,
				6.977045627709074, 7.038327071061439, 7.239818968636957,
				6.316711887331649, 6.466295498193563, 6.638536438117039,
				7.068796778077421, 7.430698493219088, 7.499118026044437,
				7.176319527833401, 6.790964294451568, 6.501432456813631,
				6.972347431002854, 6.962032974285611, 6.9924011137913,
				7.054335893286535, 7.140176416336407, 7.555850475404474 };
		long[] nodes = { 1184389576l, 738897236l, 418783075l, 3138546264l,
				2970517051l, 1794760028l, 1648029866l, 567121105l, 2970517037l,
				838822724l, 378066695l, 1238347213l, 71012836l, 954413843l,
				3214060779l, 426888459l, 2970517034l, 415030356l, 2970549634l,
				521139666l };
		for (int i = 0; i < 20; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding21RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.14992573170149, 49.57268306748389,
				49.667075185008756, 49.351254946340184, 49.14664269960856,
				49.239894770836585, 49.11256583041342, 49.84836764921077,
				49.20612963854459, 49.75136249426288, 49.49121558549515,
				49.20172957431592, 49.840603158572755, 49.75762216841236,
				49.264082487542, 49.46069802019143, 49.05715882779192,
				49.81466803790791, 49.08159480558602, 49.80256371683375,
				49.753516980067864 };
		double[] longitudes = { 7.429454955004515, 6.836276187214269,
				7.380079851716503, 6.5303048552019165, 6.655423902548835,
				6.948655302523417, 6.782541547182443, 6.311694939531043,
				6.512137340359286, 6.352857482440046, 7.208914042796822,
				6.856587740310594, 6.318875585013495, 7.198409592261475,
				7.0214050320608, 6.525073548877618, 7.097655182073145,
				6.497576011797728, 6.668299534330824, 6.841725356721866,
				7.666967551529153 };
		long[] nodes = { 378066695l, 1256083673l, 2176241650l, 1935245786l,
				2147829548l, 1861293376l, 365766866l, 1648029866l, 954413863l,
				1648029866l, 2453176434l, 1025644091l, 1648029866l,
				2970517048l, 784745121l, 489887135l, 2033001542l, 1648029866l,
				365766752l, 2970517033l, 1184389576l };
		for (int i = 0; i < 21; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 50000)
	public void testNodeFinding22RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.81204861925404, 49.42313826279656,
				49.072628851343474, 49.28388335382854, 49.29275963704515,
				49.05742892814338, 49.384204091281, 49.77363153362666,
				49.569296101287016, 49.62132678683963, 49.74864026191853,
				49.702192351099036, 49.55169804758035, 49.724323237394096,
				49.779551572805346, 49.55506164705812, 49.43097764867057,
				49.821079366941206, 49.605167806334194, 49.176086502275105,
				49.07496145103733, 49.852554731627926 };
		double[] longitudes = { 6.928688825575848, 7.0010204172084745,
				7.44687811623111, 7.412901049161317, 7.097308428994563,
				7.506650404004795, 7.109747062088052, 7.417434738916036,
				6.429295849961008, 6.98821854258617, 7.496823100865118,
				7.091471333177334, 7.713875520792255, 7.514642993443841,
				6.437802430585624, 7.517644124538518, 7.018389048110748,
				7.00347083318267, 7.352437864923742, 6.969415590276098,
				6.381207085775522, 6.499858135980064 };
		long[] nodes = { 2970517033l, 2392018628l, 561155695l, 3160674745l,
				429414815l, 378066695l, 524598806l, 1184389578l, 323799638l,
				323702123l, 1184389576l, 1068831399l, 1649541452l, 1184389576l,
				1648029866l, 1194651000l, 323832402l, 2970517036l, 1530076348l,
				378391819l, 954413914l, 1648029866l };
		for (int i = 0; i < 22; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding23RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.55873384546488, 49.72103301109284,
				49.55817800704095, 49.59383828373741, 49.477381837981,
				49.67586074852535, 49.35166487211228, 49.852186825915496,
				49.10969523950204, 49.67329502863895, 49.87173491113621,
				49.45178657811332, 49.25236459620651, 49.46660203236278,
				49.491285300421836, 49.442299757131934, 49.27198318072666,
				49.70113257200296, 49.63892571087505, 49.23015688795699,
				49.63139045233966, 49.30900817790506, 49.77869689855569 };
		double[] longitudes = { 7.151709981781282, 6.749540793462027,
				6.766037457547122, 7.161979657529614, 7.400097379336099,
				7.287297646909346, 6.296450204142626, 7.2067903126793,
				6.751417555904865, 7.28971109798484, 6.487618413561192,
				6.602267754971239, 6.447693791807412, 7.109415311937938,
				7.690416830483411, 7.25798652179431, 7.144523002363212,
				7.615013823579395, 6.546911897030687, 7.436883218504935,
				7.630193589836682, 7.3224017757277355, 7.709775743084927 };
		long[] nodes = { 1254567476l, 567121105l, 818939248l, 765315021l,
				1193135270l, 1498647973l, 21520288l, 2970517040l, 365766816l,
				249498545l, 1648029866l, 3148887381l, 954413633l, 434422740l,
				738897320l, 2349078223l, 286472823l, 1184389576l, 1357281131l,
				1277495653l, 738897311l, 21996667l, 1184389576l };
		for (int i = 0; i < 23; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding24RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.67057889538903, 49.592509401343484,
				49.3546463771977, 49.75611107642416, 49.18294285374125,
				49.0750451548558, 49.09255659735719, 49.42401597343079,
				49.59611681724474, 49.457678311755984, 49.66150507128984,
				49.184417842870076, 49.25699949606187, 49.6101650259296,
				49.661682630896365, 49.44521133950297, 49.736039072264006,
				49.58400735662769, 49.21715267143464, 49.70813145930943,
				49.64610033117834, 49.79861377953459, 49.666277380065246,
				49.29149031995629 };
		double[] longitudes = { 6.579201298432543, 7.241510368198617,
				6.643141937282902, 6.726123207876432, 7.603023210806709,
				7.101145042319413, 7.556342548079655, 7.396252662701929,
				7.012010782276299, 7.512008069205368, 7.315380726685232,
				7.3997048858042485, 7.7079611228908185, 6.960548236630826,
				6.951360055509121, 6.543245975076248, 6.5919676981781095,
				6.529109322055342, 7.177249051465572, 7.273890745163975,
				6.458934033775641, 6.375420650193335, 7.377899499794428,
				6.826783663756686 };
		long[] nodes = { 1648029807l, 965320556l, 2259840046l, 567121105l,
				1274296967l, 442867428l, 378066695l, 738896942l, 2295495077l,
				1649541339l, 2070584041l, 1749731667l, 1274296967l, 349014928l,
				546860876l, 1781818182l, 1648029866l, 503091544l, 667889613l,
				2970517050l, 1648029738l, 1648029866l, 2176241650l, 596497874l };
		for (int i = 0; i < 24; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding25RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.71842854696038, 49.35679651439345,
				49.58881336756044, 49.78675964030392, 49.06344485705443,
				49.380709164871874, 49.75701868852631, 49.131550966045005,
				49.1858496213692, 49.719759848114585, 49.49317445780979,
				49.76198900014197, 49.20751174300794, 49.37734847051969,
				49.54080656847456, 49.09674347196266, 49.140656020167185,
				49.40884015496672, 49.54694218748796, 49.59532007576511,
				49.60682771752793, 49.51753782412652, 49.61678072212352,
				49.81751127867944, 49.505676748367804 };
		double[] longitudes = { 7.598071343778276, 6.625856782473924,
				6.711040207327205, 6.526622091579367, 7.425975394170925,
				6.623190437861407, 7.0897169560018325, 7.293049241265533,
				7.676500881912891, 6.440533849923636, 6.840886006917684,
				7.44552995612394, 7.47070509335045, 6.555619912829754,
				7.564687934868069, 6.642885253071885, 6.6936781727902686,
				6.7166251562316335, 6.745470765080754, 6.32525675790794,
				6.999085552617854, 7.013032761489676, 6.929445492889586,
				7.108555457419405, 7.156300678093574 };
		long[] nodes = { 1184389576l, 518864994l, 1652904249l, 1648029866l,
				561161447l, 3307740995l, 2970517035l, 2865920777l, 1274296967l,
				1648029866l, 1864285045l, 1184389578l, 1749731669l, 378493022l,
				521139666l, 1427485288l, 1427485280l, 3491242859l, 1251285489l,
				25681536l, 3372144953l, 471820583l, 323517306l, 2970517037l,
				2345946929l };
		for (int i = 0; i < 25; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding26RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.67518009723298, 49.31410837770214,
				49.20744172738297, 49.812609604430904, 49.08839905641603,
				49.392587741372914, 49.30517341982695, 49.79178513250471,
				49.61313601858762, 49.141599840880055, 49.87063947972241,
				49.17244908280767, 49.41878989978045, 49.554654443881994,
				49.76432382133025, 49.59771142827977, 49.690747949778604,
				49.123045338890506, 49.70601386081442, 49.85818304879771,
				49.471960015324214, 49.79999790801685, 49.62984208825682,
				49.70530357919609, 49.44478261905822, 49.20703376406177 };
		double[] longitudes = { 6.832086617333909, 6.290022354276264,
				7.573313024046183, 7.584599779911477, 6.992957894663855,
				7.102812510328533, 7.133339309392872, 7.552219256104432,
				7.481058504455578, 6.331398582702912, 6.409746350890284,
				7.5664138162193355, 6.928717023887662, 7.229564258559865,
				7.612219523901281, 7.623300233284645, 6.975433550097657,
				6.926731981154873, 7.642283578438969, 6.900376792812988,
				6.913274401976411, 6.634451091253819, 7.561226276726609,
				7.597657384461144, 6.468706712459426, 6.555869718701186 };
		long[] nodes = { 3041717996l, 951513418l, 1274296967l, 1184389576l,
				2550962092l, 3366494219l, 1350687117l, 1184389576l,
				1194650943l, 951679018l, 1648029866l, 1274296967l, 650035504l,
				297478176l, 1184389576l, 738897310l, 2702316565l, 1495198467l,
				1184389576l, 2970517033l, 250749702l, 1648029866l, 1194650943l,
				1184389576l, 1772361475l, 954413840l };
		for (int i = 0; i < 26; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding27RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.347775042190634, 49.092704309317,
				49.62424977939562, 49.56880897032357, 49.1603773349483,
				49.542626130632264, 49.0663378520566, 49.365669426668006,
				49.67237553861256, 49.846050302457414, 49.23982010788133,
				49.83157489962697, 49.60568689440115, 49.59522646643962,
				49.272614085613036, 49.74767343606253, 49.42381332357227,
				49.6169262891457, 49.242656538522745, 49.723253874995635,
				49.12740851489363, 49.379960927549114, 49.59545336722921,
				49.817874811428815, 49.24702232028519, 49.09262274400274,
				49.13711143845226 };
		double[] longitudes = { 6.40734618929488, 7.432849419469368,
				6.806624838023789, 6.408831391494618, 6.999359913317018,
				7.0721457415720765, 6.329027469976607, 7.589184064758146,
				6.290963297615893, 6.814803345286844, 6.389877857155598,
				6.339396276573223, 7.650172889221087, 6.444072755488653,
				6.582960427656544, 6.748498421501558, 6.935993535317984,
				6.988812712541998, 6.70032191222828, 7.553552167776319,
				7.169062563490838, 6.376257077646754, 7.7010633374560555,
				6.965293606706876, 6.400181291697064, 6.367725563387453,
				6.940927976540526 };
		long[] nodes = { 21520288l, 521100095l, 71020366l, 261009743l,
				3269782901l, 36162524l, 951679018l, 1629272738l, 25684899l,
				2970517033l, 954413740l, 1648029866l, 738897316l, 88843964l,
				954413941l, 567121105l, 1705793406l, 756705571l, 3334383800l,
				1184389576l, 515340145l, 21520288l, 1649541452l, 2970517036l,
				954413929l, 954413854l, 1495198466l };
		for (int i = 0; i < 27; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding28RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.76217783269741, 49.80745375005163,
				49.68926499554999, 49.69137633931242, 49.18413347589923,
				49.43053264419669, 49.34590828695068, 49.28328115609334,
				49.073787452756626, 49.15211960797473, 49.81679949498313,
				49.672994389343295, 49.361932208488355, 49.59965979572682,
				49.45960907164777, 49.56435468494445, 49.532159518414545,
				49.560433804377325, 49.55939729708723, 49.847285552103635,
				49.15516022917575, 49.71375935842836, 49.38959350932144,
				49.11306866535712, 49.30643340939792, 49.837395798779085,
				49.44290961912016, 49.75214964873651 };
		double[] longitudes = { 7.677192656693399, 6.943651474664967,
				6.5631838347080045, 6.295164416379119, 6.397772731424359,
				6.54332724822037, 6.468140524259538, 6.966660259577603,
				7.400402511265419, 6.406490253727461, 7.047463641659346,
				7.526803729140898, 7.137510008024784, 6.522473757666977,
				6.914150977115315, 6.302572422419925, 7.1648537352426915,
				7.379473732578792, 6.983440785202226, 6.351332537089624,
				7.577492092666451, 7.613304760226473, 6.8484251367903966,
				6.719166106093339, 7.375747419195014, 7.5760678660640135,
				7.653908360340659, 7.219934466523085 };
		long[] nodes = { 1184389576l, 2970517033l, 1648029819l, 25684899l,
				954413818l, 323760607l, 1935245786l, 1424157256l, 561152974l,
				954413790l, 2970517036l, 249483454l, 520407615l, 1054487969l,
				250749816l, 25681516l, 2566931797l, 1194650925l, 758643954l,
				1648029866l, 378066695l, 1184389576l, 1851902029l, 365766752l,
				319170595l, 1184389576l, 1665329652l, 2970517048l };
		for (int i = 0; i < 28; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding29RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.28546706219054, 49.188598355968715,
				49.51193863072497, 49.46824239652488, 49.261748160831466,
				49.670434118830684, 49.43360388088509, 49.76543556743262,
				49.54037773559189, 49.52628421526717, 49.43322746744268,
				49.206070890292814, 49.48686785462117, 49.78211326477496,
				49.24998571517213, 49.77354495240475, 49.145373036941756,
				49.48637346663216, 49.33215471336955, 49.33530064435235,
				49.807869926315846, 49.816720405630704, 49.56058551336345,
				49.43909454748603, 49.50057822017717, 49.281739633926556,
				49.11926646732345, 49.22244903392279, 49.23389374049082 };
		double[] longitudes = { 6.610227877743738, 6.637121668384149,
				7.442603732574865, 7.27449088174263, 7.482593099882141,
				6.819523864590849, 7.531463541009482, 7.11366299886957,
				6.691721886601404, 7.313668361155829, 7.645773070616845,
				7.5527117882488986, 7.662953257874108, 6.66266788464025,
				7.7072547616898355, 6.595155730053843, 6.407077355941189,
				7.031198412531771, 6.542130844297583, 6.790385412307161,
				6.513181917935508, 7.40286283236937, 6.618842095816148,
				6.311013176073705, 7.240400507361563, 6.906129904027777,
				6.564824953295185, 7.61823994386807, 7.004318252500102 };
		long[] nodes = { 2459218554l, 365767027l, 1194650868l, 2353878266l,
				1639033445l, 3041717996l, 1649541343l, 2970517038l, 765875613l,
				1134272154l, 1629272754l, 1274296967l, 738897310l, 567121105l,
				1274296967l, 1648029866l, 954413790l, 2310068301l, 382921548l,
				1201318903l, 1648029866l, 1184389574l, 665877725l, 1973832736l,
				2363317162l, 1350361806l, 514530354l, 1274296967l, 2231679398l };
		for (int i = 0; i < 29; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding2RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.072597524444795, 49.41581957785889 };
		double[] longitudes = { 6.465147335080623, 6.962417227076481 };
		long[] nodes = { 954413773l, 321181050l };
		for (int i = 0; i < 2; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding30RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.23673987037591, 49.12642838813658,
				49.75186396523648, 49.49584606052139, 49.69651058212691,
				49.58066886950684, 49.76761236862032, 49.55451386138132,
				49.30369533218353, 49.304500889585846, 49.121582799211545,
				49.768709423476636, 49.22595915234979, 49.61165287114758,
				49.63966602169983, 49.28566986757172, 49.25400359000761,
				49.08367075243278, 49.75999400079654, 49.423160879227815,
				49.73275823263269, 49.42490115248735, 49.3728820673676,
				49.43002068602584, 49.467009269663485, 49.429136132737334,
				49.779292715499935, 49.81354766891582, 49.77807761848772,
				49.63718800239533 };
		double[] longitudes = { 6.338572643579737, 7.067995611985893,
				7.439339564350202, 6.968711937464628, 7.638428179598819,
				7.4102662385986875, 6.888809796019972, 7.631767283814376,
				6.601661158814646, 6.7701731914626135, 7.012102657119646,
				7.300710407287566, 6.797034018652784, 6.392194988294595,
				6.954299956409863, 7.312040821260801, 7.082636379764647,
				6.330073244839592, 7.179129093867869, 7.6699458549117505,
				6.316777194261809, 7.555761208910617, 7.2995935684629885,
				6.6054951030212745, 7.544663759698546, 6.321264786842702,
				7.640193169406679, 7.4410012138653725, 7.505226200598048,
				7.700914538494429 };
		long[] nodes = { 954413778l, 703114330l, 1184389578l, 567204179l,
				1184389576l, 1194650918l, 2970517033l, 738897310l, 2225811440l,
				1139603934l, 1495178241l, 2970517047l, 1044954408l, 25684918l,
				544736813l, 264995149l, 1501545554l, 951679018l, 1342070121l,
				1665329665l, 25684900l, 1665329609l, 360891230l, 2730704430l,
				1649541366l, 1973832736l, 1184389576l, 1184389576l,
				1184389576l, 1649541452l };
		for (int i = 0; i < 30; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding31RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.69517979568648, 49.08994527295941,
				49.42943159222654, 49.50267045715037, 49.12171019534619,
				49.84464422923275, 49.61815039758089, 49.24928918160316,
				49.538730810916206, 49.67280609221137, 49.86099588275751,
				49.32459878498297, 49.443939410996926, 49.63196867798756,
				49.10247619519988, 49.5949024735488, 49.26049441930997,
				49.742608769760125, 49.19838095850728, 49.71359996577948,
				49.467452176153245, 49.387268144812005, 49.30818286227234,
				49.192622712139816, 49.561685693455495, 49.10578177653113,
				49.39895785406157, 49.50795696882836, 49.402524674155295,
				49.806833766999446, 49.83207647669161 };
		double[] longitudes = { 7.0678652793122305, 6.962057787940366,
				6.736243522929998, 7.20546201973008, 6.401090247517633,
				7.335702776114154, 6.957014685115032, 6.7610364525599564,
				7.695239343774988, 7.469167468941787, 6.761929015231784,
				6.753677464683533, 7.713831792139276, 6.312191620485495,
				6.650702488634027, 7.719708727469371, 6.787053903361975,
				7.665150969593771, 6.5410773417496095, 7.104605625404777,
				6.651430062371578, 7.232207634025228, 7.595903687145724,
				6.578640150286759, 6.382860957668109, 6.404198218673788,
				6.510787214185326, 6.755886643629107, 6.4125906253150475,
				7.351489846360516, 6.983068195639765 };
		long[] nodes = { 3138545119l, 2550962092l, 431313462l, 2364326524l,
				954413790l, 1184389569l, 3394422678l, 1461091174l, 1649541452l,
				249483454l, 2970517033l, 1303879770l, 1629272823l, 2653643908l,
				1427485288l, 1649541452l, 3150446871l, 1184389576l, 954413794l,
				1342070121l, 1484072692l, 324719289l, 1274297111l, 514530352l,
				260945748l, 954413790l, 21520439l, 315041560l, 21520288l,
				1184389569l, 2970517036l };
		for (int i = 0; i < 31; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding32RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.47526705161573, 49.11615104163953,
				49.66346535987365, 49.46145155572808, 49.35532626983149,
				49.58340562545322, 49.12004319250498, 49.60008362762168,
				49.51712854411439, 49.46350814931784, 49.424525707919635,
				49.20590867086803, 49.58997248600027, 49.54864480990787,
				49.32905048196626, 49.36172279662775, 49.263333804398656,
				49.695152683937266, 49.12297878411114, 49.557272508663466,
				49.069289828312364, 49.210330242748505, 49.40202474802998,
				49.85488933650986, 49.08111168030151, 49.505089349530834,
				49.056401410559225, 49.845512092378954, 49.46022191189186,
				49.40257044249144, 49.776781450770756, 49.572666105533365 };
		double[] longitudes = { 6.346744642542367, 6.951795481518291,
				6.3273640340056625, 7.083468398735467, 7.087659641303308,
				6.957131848075044, 7.431344733884212, 7.326387922962493,
				6.597990201817376, 7.239729268711532, 7.197596961469861,
				7.027868187972938, 6.55052513738132, 6.886203366174595,
				6.966016105754447, 6.595773762818047, 7.355885815614867,
				7.382534797184939, 6.422000288148584, 6.988287139078539,
				7.083644857505253, 6.286981103122897, 7.663547352986967,
				6.877024207362433, 6.77436099656096, 6.867078307001119,
				6.780050006590851, 6.699181071034628, 7.2286381110217945,
				7.516960968204184, 6.3921838504688475, 7.116196336746517 };
		long[] nodes = { 264251969l, 1754270995l, 1257672205l, 2308729375l,
				455493612l, 3214584807l, 378066695l, 2841656658l, 456737060l,
				403295215l, 2075168283l, 412248024l, 1357281101l, 3469204983l,
				1504544878l, 1366644239l, 614413620l, 249483454l, 1521581862l,
				391375808l, 2033001542l, 951513418l, 1629272754l, 2970517033l,
				365766836l, 484789064l, 365766836l, 2970517033l, 2126114582l,
				1326350260l, 1648029866l, 2175104654l };
		for (int i = 0; i < 32; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding3RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.232038262049564, 49.737697320075526,
				49.13168341716825 };
		double[] longitudes = { 7.435969870171049, 7.259696515945665,
				6.618680574407515 };
		long[] nodes = { 1277495653l, 2970517048l, 1427794655l };
		for (int i = 0; i < 3; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding4RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.515616427942284, 49.223390664839236,
				49.70153461940115, 49.548501004587195 };
		double[] longitudes = { 7.441316780068782, 7.718978613820475,
				6.973037219187804, 7.293025056055194 };
		long[] nodes = { 1194651008l, 1274296967l, 976900081l, 1137485057l };
		for (int i = 0; i < 4; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding5RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.35655902755185, 49.091040406171516,
				49.08337264550115, 49.261779108572206, 49.71975944010016 };
		double[] longitudes = { 7.695326624274307, 7.018726874767292,
				6.5042770505434335, 6.33030951907431, 7.268983220755944 };
		long[] nodes = { 1665329665l, 1495178227l, 514530354l, 954413778l,
				2970517050l };
		for (int i = 0; i < 5; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding6RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.5172063294556, 49.51034710182139,
				49.5561489384168, 49.46635976548025, 49.65226859242135,
				49.55879137469541 };
		double[] longitudes = { 7.66746075622392, 7.309840873945274,
				6.6932814960479075, 7.699768827523138, 6.838920179363123,
				6.904537145402006 };
		long[] nodes = { 738897313l, 968109791l, 2163062607l, 738897318l,
				3041717996l, 271358591l };
		for (int i = 0; i < 6; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding7RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.370655333500856, 49.81115791971687,
				49.20024052828997, 49.47291597128559, 49.82276313625262,
				49.24258675101854, 49.31137290429391 };
		double[] longitudes = { 6.470657900225153, 7.609132927284662,
				6.959712102443665, 6.958516159057262, 7.6483093150248695,
				7.146202146960278, 6.674688078570576 };
		long[] nodes = { 1235635803l, 1184389576l, 1740659649l, 2423148605l,
				1184389576l, 271110537l, 2431037752l };
		for (int i = 0; i < 7; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding8RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.18943586191909, 49.822518533673986,
				49.207860336610686, 49.608306341486276, 49.2434230793105,
				49.600255755836145, 49.6331333124278, 49.423311045605296 };
		double[] longitudes = { 7.511909940669323, 6.34230634420124,
				6.658019341735987, 6.657067889330867, 7.161003747098291,
				7.672245715731368, 6.845884756168177, 7.094276164855808 };
		long[] nodes = { 378066695l, 1648029866l, 2445013985l, 1521687103l,
				339156203l, 1649541452l, 1290073551l, 2254736114l };
		for (int i = 0; i < 8; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

	@Test(timeout = 5000)
	public void testNodeFinding9RandomNodesInside() {
		NodeFinder nf = getNodeFinder();
		assertNotNull("NodeFinder was null", nf);
		double[] latitudes = { 49.169187676731454, 49.365505430129616,
				49.072047053060814, 49.668839778630804, 49.35056999973942,
				49.43626856244098, 49.14849218523424, 49.678250201431325,
				49.75691957281246 };
		double[] longitudes = { 6.988433378289033, 6.955045341946726,
				7.695131709980021, 7.313816427488513, 6.436894823063704,
				7.656214723795359, 7.42784135015626, 6.3401195510649035,
				6.678707120968605 };
		long[] nodes = { 384896799l, 1650931240l, 378066695l, 249498544l,
				21520288l, 1665329652l, 378066695l, 25684900l, 567121105l };
		for (int i = 0; i < 9; i++) {
			Coordinate c = new Coordinate(latitudes[i], longitudes[i]);
			Node n = nf.getNodeForCoordinates(c);
			assertNotNull("NodeFinder return null for (" + latitudes[i] + "|"
					+ longitudes[i] + ").", n);
			assertEquals("NodeFinder return wrong node for (" + latitudes[i]
					+ "|" + longitudes[i] + ").", nodes[i], n.getId());
		}
		;
	}

}